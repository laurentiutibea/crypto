{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/laurentiu/Documents/crypto/client/pages/customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts'; // import HighchartsReact from 'highcharts-react-official';\n\nimport ReactHighcharts from 'react-highcharts';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nimport loading from \"../src/91.gif\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x'\n  },\n  xAxis: {\n    type: 'datetime'\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class CustomData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: [],\n      graphs: [],\n      cryptocurrencies: [{\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      }, {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }],\n      currencies: [{\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      }, {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }],\n      selectedCryptocurrency: \"\",\n      selectedCurrency: \"\",\n      workers: 0,\n      loading: false,\n      interval: [],\n      chartOptions: {}\n    });\n\n    _defineProperty(this, \"addGraph\", () => {\n      const worker = new Worker(\"static/service-worker.js\");\n\n      const bkOptions = _objectSpread({}, chartOptions);\n\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        console.log(e.data);\n        bkOptions.title = {\n          text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`\n        }, bkOptions.series = [{\n          type: \"line\",\n          name: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n          data: e.data.prices\n        }];\n        graphs.push({\n          id: _Date$now(),\n          chartOptions: bkOptions,\n          cryptocurrency: this.state.selectedCryptocurrency,\n          currency: this.state.selectedCurrency,\n          live: false\n        });\n        console.log(graphs);\n        this.setState({\n          data: e.data.prices,\n          graphs: graphs,\n          workers: this.state.workers + 1,\n          interval: interval\n        });\n      };\n\n      worker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"changeCryptocurrency\", e => {\n      console.log(e.target.value);\n      this.setState({\n        [`selected${e.target.name}`]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"refreshAll\", () => {\n      let workers = new Array(this.state.workers);\n      const graphs = [...this.state.graphs];\n      this.setState({\n        loading: true\n      });\n\n      for (let i = 0; i < this.state.workers; i++) {\n        workers[i] = new Worker(\"static/service-worker.js\");\n\n        workers[i].onmessage = e => {\n          graphs[i].chartOptions.series = [{\n            type: \"line\",\n            name: this.state.graphs[i].chartOptions.series[0].name,\n            data: e.data.prices\n          }];\n          this.setState({\n            data: e.data.prices,\n            graphs: graphs,\n            loading: false\n          });\n        };\n\n        workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n      }\n    });\n\n    _defineProperty(this, \"liveData\", index => {\n      console.log(\"LIVE\", index);\n      const worker = new Worker(\"static/service-worker.js\");\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n        }];\n        this.setState({\n          data: graphs[index].chartOptions.series[0].data,\n          graphs: graphs\n        });\n      };\n\n      worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"changeGraphLive\", (e, index) => {\n      const graphs = [...this.state.graphs];\n\n      if (e.target.checked) {\n        graphs[index].interval = setInterval(() => this.liveData(index), 4000);\n        this.setState({\n          graphs\n        });\n      } else {}\n    });\n  }\n\n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n       const bkOptions = {...this.state.chartOptions};\n       bkOptions.series = [{\n         type: \"area\",\n         name: \"BTC to EUR\",\n         data: res.data\n       }]\n       this.setState({\n         data: res.data,\n         chartOptions: bkOptions\n         })\n     }); */\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Hello \", this.state.user.name), __jsx(\"div\", {\n      className: \"form-group w-25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: this.changeCryptocurrency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Select Cryptocurrency\"), this.state.cryptocurrencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol))), __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: this.changeCryptocurrency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Select Currency\"), this.state.currencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)))), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"+\"), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.refreshAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"REFRESH\"), this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      className: \"row mt-4\",\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: this.changeGraphCryptocurrency,\n      defaultValue: item.cryptocurrency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, this.state.cryptocurrencies.map(i => __jsx(\"option\", {\n      value: i.id,\n      key: i.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, i.name, \" - \", i.symbol))), __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: this.changeGraphCryptocurrency,\n      defaultValue: item.currency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, this.state.currencies.map(i => __jsx(\"option\", {\n      value: i.id,\n      key: i.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, i.name, \" - \", i.symbol))), __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: e => this.changeGraphLive(e, index),\n      defaultValue: item.live,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: \"col-md-9 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, !this.state.loading ? __jsx(ReactHighcharts, {\n      key: item.id,\n      highcharts: Highcharts,\n      config: item.chartOptions,\n      ref: \"chart\",\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }) : __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    })))) : \"\");\n  }\n\n}","map":{"version":3,"sources":["/home/laurentiu/Documents/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","ReactHighcharts","auth","crypto","loading","chartOptions","chart","zoomType","xAxis","type","yAxis","title","text","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","jwt","data","graphs","cryptocurrencies","id","name","symbol","currencies","selectedCryptocurrency","selectedCurrency","workers","interval","worker","Worker","bkOptions","state","onmessage","e","console","log","series","prices","push","cryptocurrency","currency","live","setState","postMessage","target","value","Array","i","index","currentPrice","checked","setInterval","liveData","componentDidMount","getCurrentUser","getJwt","render","changeCryptocurrency","map","item","addGraph","refreshAll","length","changeGraphCryptocurrency","changeGraphLive"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\nimport ReactHighcharts from 'react-highcharts';\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nimport loading from \"../src/91.gif\";\n\n\nconst chartOptions = {\n  chart: {zoomType: 'x'},\n      xAxis: { type: 'datetime'},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {\n                  hover: {lineWidth: 1}\n              },\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    jwt: \"\",\n    data: [],\n    graphs: [],\n    cryptocurrencies: [\n      {\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      },\n      {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }\n    ],\n    currencies : [\n      {\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      },\n      {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }\n    ],\n    selectedCryptocurrency: \"\",\n    selectedCurrency: \"\",\n    workers: 0,\n    loading: false,\n    interval: [],\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({user,jwt});\n   /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n  }\n\n  addGraph = () => {\n    const worker = new Worker(\"static/service-worker.js\");\n    const bkOptions = {...chartOptions};\n    const graphs = [...this.state.graphs];\n    worker.onmessage = e => {\n\t\tconsole.log(e.data);\n\t\tbkOptions.title =  {text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`},\n\t\tbkOptions.series = [{\n\t\t\ttype: \"line\",\n\t\t\tname: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n\t\t\tdata: e.data.prices\n\t\t}]\n\t\tgraphs.push({\n\t\t\tid: Date.now(),\n\t\t\tchartOptions: bkOptions,\n\t\t\tcryptocurrency: this.state.selectedCryptocurrency,\n\t\t\tcurrency: this.state.selectedCurrency,\n\t\t\tlive: false\n    })\n      \tconsole.log(graphs);\n      \tthis.setState({\n        \tdata: e.data.prices,\n        \tgraphs: graphs,\n          workers: this.state.workers+1,\n          interval: interval\n\t\t})\n    }\n    worker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n    \n  }\n\n  changeCryptocurrency = (e) => {\n    console.log(e.target.value)\n    this.setState({[`selected${e.target.name}`]:e.target.value});\n  }\n\n  refreshAll = () => {\n    let workers = new Array(this.state.workers);\n    const graphs = [...this.state.graphs];\n    this.setState({loading: true})\n    for(let i=0; i<this.state.workers; i++){\n      workers[i] = new Worker(\"static/service-worker.js\");\n      workers[i].onmessage = e => {\n        graphs[i].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[i].chartOptions.series[0].name,\n          data: e.data.prices\n        }]\n        this.setState({\n          data: e.data.prices,\n          graphs: graphs,\n          loading: false\n        })\n      }\n      workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n      }\n  }\n\n  liveData = (index) => {\n    console.log(\"LIVE\",index);\n    const worker = new Worker(\"static/service-worker.js\");\n    const graphs = [...this.state.graphs];\n\tworker.onmessage = e => {\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n\t\t}]\n        this.setState({\n          \tdata: graphs[index].chartOptions.series[0].data,\n          \tgraphs: graphs\n        })\n      }\n\tworker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n  }\n\n  changeGraphLive = (e,index) => {\n    const graphs = [...this.state.graphs];\n    if(e.target.checked){\n      graphs[index].interval = setInterval(() => this.liveData(index), 4000);\n      this.setState({graphs});\n    }\n    else{\n\n    }\n  }\n\n  render() {\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          <div className=\"form-group w-25\">\n            <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency} className=\"form-control\"><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n            <select name=\"Currency\" onChange={this.changeCryptocurrency} className=\"form-control\"><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n          </div>\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH</button>\n            {this.state.graphs.length > 0 ? \n\t\t\t\tthis.state.graphs.map((item,index) => \n\t\t\t\t\t<div className=\"row mt-4\" key={item.id}>\n\t\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t<select name=\"Cryptocurrency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.cryptocurrency} className=\"form-control\">{this.state.cryptocurrencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\n                        \t<select name=\"Currency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.currency} className=\"form-control\">{this.state.currencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\n\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={(e) => this.changeGraphLive(e,index)} defaultValue={item.live} className=\"form-control\"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-md-9 text-center\">\n\t\t\t\t\t\t\t{!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true}/> : <img src={loading}/>}\n\t\t\t\t\t\t</div> \n\t\t\t\t\t</div>\n            ): \"\"}\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}