{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\WEB\\\\crypto\\\\client\\\\pages\\\\customdata.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nvar CustomData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomData, _Component);\n\n  function CustomData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CustomData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      user: {},\n      data: [],\n      graphs: [],\n      options: {\n        chart: {\n          zoomType: 'x'\n        },\n        title: {\n          text: 'USD to EUR exchange rate over time'\n        },\n        subtitle: {\n          text: 'Click and drag in the plot area to zoom in'\n        },\n        xAxis: {\n          type: 'datetime'\n        },\n        yAxis: {\n          title: {\n            text: 'Exchange rate'\n          }\n        },\n        legend: {\n          enabled: false\n        },\n        plotOptions: {\n          area: {\n            fillColor: {\n              linearGradient: {\n                x1: 0,\n                y1: 0,\n                x2: 0,\n                y2: 1\n              }\n            },\n            marker: {\n              radius: 2\n            },\n            lineWidth: 1,\n            states: {\n              hover: {\n                lineWidth: 1\n              }\n            },\n            threshold: null\n          }\n        },\n        series: [{\n          type: 'area',\n          name: 'USD to EUR'\n        }]\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addGraph\", function () {\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      graphs.push({\n        id: 1,\n        data: {\n          name: \"Bitcoin\"\n        }\n      });\n\n      _this.setState({\n        graphs: graphs\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(CustomData, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var user, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                user = auth.getCurrentUser();\n                this.setState({\n                  user: user\n                });\n                options = {\n                  chart: {\n                    zoomType: 'x'\n                  },\n                  title: {\n                    text: 'USD to EUR exchange rate over time'\n                  },\n                  subtitle: {\n                    text: 'Click and drag in the plot area to zoom in'\n                  },\n                  xAxis: {\n                    type: 'datetime'\n                  },\n                  yAxis: {\n                    title: {\n                      text: 'Exchange rate'\n                    }\n                  },\n                  legend: {\n                    enabled: false\n                  },\n                  plotOptions: {\n                    area: {\n                      fillColor: {\n                        linearGradient: {\n                          x1: 0,\n                          y1: 0,\n                          x2: 0,\n                          y2: 1\n                        }\n                      },\n                      marker: {\n                        radius: 2\n                      },\n                      lineWidth: 1,\n                      states: {\n                        hover: {\n                          lineWidth: 1\n                        }\n                      },\n                      threshold: null\n                    }\n                  },\n                  series: [{\n                    type: 'area',\n                    name: 'USD to EUR'\n                  }]\n                };\n                _context.next = 5;\n                return crypto.getCurrencies().then(function (res) {\n                  return _this2.setState({\n                    data: res.data\n                  });\n                });\n\n              case 5:\n                options.series[0].data = this.state.data;\n                this.setState({\n                  options: options\n                });\n                console.log(this.state.options.series);\n                console.log(this.state.data);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      //const select = <select>{this.state.data.data.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Hello \", this.state.user.name), __jsx(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.addGraph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"+\"), __jsx(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.graphs.length > 0 ? this.state.graphs.map(function (item) {\n        return __jsx(HighchartsReact, {\n          key: item.id,\n          highcharts: Highcharts,\n          options: _this3.state.options,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      }) : \"\"));\n    }\n  }]);\n\n  return CustomData;\n}(Component);\n\nexport { CustomData as default };","map":{"version":3,"sources":["D:/WEB/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","CustomData","user","data","graphs","options","chart","zoomType","title","text","subtitle","xAxis","type","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","marker","radius","lineWidth","states","hover","threshold","series","name","state","push","id","setState","getCurrentUser","getCurrencies","then","res","console","log","addGraph","length","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nexport default class CustomData extends Component {\r\n  state = {\r\n    user: {},\r\n    data: [],\r\n    graphs: [],\r\n    options: {\r\n      chart: {zoomType: 'x' },\r\n    title: {text: 'USD to EUR exchange rate over time'},\r\n    subtitle: {text: 'Click and drag in the plot area to zoom in'},\r\n    xAxis: { type: 'datetime'},\r\n    yAxis: {\r\n        title: {text: 'Exchange rate'}\r\n    },\r\n    legend: {enabled: false},\r\n    plotOptions: {\r\n        area: {\r\n            fillColor: {\r\n                linearGradient: {\r\n                    x1: 0,\r\n                    y1: 0,\r\n                    x2: 0,\r\n                    y2: 1\r\n                },\r\n            },\r\n            marker: {radius: 2},\r\n            lineWidth: 1,\r\n            states: {\r\n                hover: {lineWidth: 1}\r\n            },\r\n            threshold: null\r\n        }\r\n    },\r\n\r\n    series: [{\r\n        type: 'area',\r\n        name: 'USD to EUR'\r\n    }]\r\n  }\r\n  }\r\n  \r\n  async componentDidMount() {\r\n\tconst user = auth.getCurrentUser();\r\n    this.setState({user});\r\n    const options = {\r\n      chart: {zoomType: 'x' },\r\n    title: {text: 'USD to EUR exchange rate over time'},\r\n    subtitle: {text: 'Click and drag in the plot area to zoom in'},\r\n    xAxis: { type: 'datetime'},\r\n    yAxis: {\r\n        title: {text: 'Exchange rate'}\r\n    },\r\n    legend: {enabled: false},\r\n    plotOptions: {\r\n        area: {\r\n            fillColor: {\r\n                linearGradient: {\r\n                    x1: 0,\r\n                    y1: 0,\r\n                    x2: 0,\r\n                    y2: 1\r\n                },\r\n            },\r\n            marker: {radius: 2},\r\n            lineWidth: 1,\r\n            states: {\r\n                hover: {lineWidth: 1}\r\n            },\r\n            threshold: null\r\n        }\r\n    },\r\n\r\n    series: [{\r\n        type: 'area',\r\n        name: 'USD to EUR'\r\n    }]\r\n  }\r\n    await crypto.getCurrencies().then(res => this.setState({data: res.data}));\r\n    options.series[0].data = this.state.data;\r\n    this.setState({options: options});\r\n    console.log(this.state.options.series);    console.log(this.state.data);\r\n  }\r\n\r\n  addGraph = () => {\r\n      const graphs = [...this.state.graphs];\r\n      graphs.push({\r\n          id: 1,\r\n          data: {\r\n              name: \"Bitcoin\"\r\n          }\r\n      })\r\n      this.setState({graphs});\r\n  }\r\n\r\n  render() {\r\n    //const select = <select>{this.state.data.data.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n\r\n    return (\r\n      <Layout>\r\n          <p>Hello {this.state.user.name}</p>\r\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\r\n          <div className=\"row\">\r\n            {this.state.graphs.length > 0 ? \r\n              this.state.graphs.map(item => <HighchartsReact key={item.id} highcharts={Highcharts} options={this.state.options}/>): \"\"}\r\n            {/* {this.state.graphs.length > 0 ? \r\n                this.state.graphs.map(item => \r\n                    <div className=\"col-md-6\" key={item.id}>\r\n                        {select}\r\n                        <p>{item.data.name}</p>\r\n                        <HighchartsReact highcharts={Highcharts} options={this.state.options}/>\r\n                    </div> \r\n            ): \"\"} */}\r\n          </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}