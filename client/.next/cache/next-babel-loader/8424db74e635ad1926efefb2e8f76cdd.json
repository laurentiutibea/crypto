{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/laurentiu/Documents/crypto/client/pages/customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts'; // import HighchartsReact from 'highcharts-react-official';\n\nimport ReactHighcharts from 'react-highcharts';\nimport update from \"react-addons-update\";\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nimport loading from \"../src/91.gif\";\nvar chartOptions = {\n  chart: {\n    zoomType: 'x'\n  },\n  xAxis: {\n    type: 'datetime',\n    dateTimeLabelFormats: {\n      day: '%d-%m-%Y - %h:%m'\n    },\n    title: {\n      text: 'Date'\n    }\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\n\nvar CustomData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomData, _Component);\n\n  function CustomData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CustomData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      user: {},\n      jwt: \"\",\n      data: [],\n      graphs: [],\n      cryptocurrencies: [],\n      currencies: [],\n      selectedCryptocurrency: {},\n      selectedCurrency: {},\n      workers: 0,\n      loading: false,\n      loaded: false,\n      interval: [],\n      chartOptions: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addGraph\", function () {\n      var worker = new Worker(\"static/service-worker.js\");\n\n      var bkOptions = _objectSpread({}, chartOptions);\n\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      worker.onmessage = function (e) {\n        console.log(e.data);\n        bkOptions.title = {\n          text: \"\".concat(_this.state.selectedCryptocurrency.name, \" to \").concat(_this.state.selectedCurrency.name, \" exchange rate over time\")\n        }, bkOptions.series = [{\n          type: \"line\",\n          name: \"\".concat(_this.state.selectedCryptocurrency.name, \" to \").concat(_this.state.selectedCurrency.name),\n          data: e.data.prices\n        }];\n        bkOptions.xAxis.categories = _toConsumableArray(e.data.time);\n        graphs.push({\n          id: _Date$now(),\n          chartOptions: bkOptions,\n          cryptocurrency: _this.state.selectedCryptocurrency.value,\n          currency: _this.state.selectedCurrency.value,\n          live: false\n        });\n        console.log(graphs);\n\n        _this.setState({\n          graphs: graphs,\n          workers: _this.state.workers + 1,\n          interval: \"\"\n        });\n      };\n\n      worker.postMessage(\"\".concat(_this.state.selectedCryptocurrency.value, \",\").concat(_this.state.selectedCurrency.value, \",\").concat(_this.state.jwt));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeCryptocurrency\", function (e) {\n      console.log(e.target.value);\n      var name = \"\";\n\n      for (var i = 0; i < _this.state.cryptocurrencies.length; i++) {\n        if (_this.state.cryptocurrencies[i].id === e.target.value) {\n          name = _this.state.cryptocurrencies[i].name;\n          console.log(name);\n          break;\n        }\n      }\n\n      console.log(name);\n      /* const value = JSON.parse(e.target.value);\n      console.log(value);\n      this.setState({\n        [`selected${e.target.name}`]:{\n          value: value.id,\n          name: value.name\n        }\n      }); */\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"refreshAll\", function () {\n      var workers = new Array(_this.state.workers);\n\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      _this.setState({\n        loading: true\n      });\n\n      var _loop = function _loop(i) {\n        workers[i] = new Worker(\"static/service-worker.js\");\n\n        workers[i].onmessage = function (e) {\n          graphs[i].chartOptions.xAxis.categories = _toConsumableArray(e.data.time);\n          graphs[i].chartOptions.series = [{\n            type: \"line\",\n            name: _this.state.graphs[i].chartOptions.series[0].name,\n            data: e.data.prices\n          }];\n\n          _this.setState({\n            graphs: graphs,\n            loading: false\n          });\n        };\n\n        workers[i].postMessage(\"\".concat(graphs[i].cryptocurrency, \",\").concat(graphs[i].currency, \",\").concat(_this.state.jwt));\n      };\n\n      for (var i = 0; i < _this.state.workers; i++) {\n        _loop(i);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"refreshSingle\", function (index) {\n      var worker = new Worker(\"static/service-worker.js\");\n\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      _this.setState({\n        loading: true\n      });\n\n      worker.onmessage = function (e) {\n        graphs[index].chartOptions.xAxis.categories = _toConsumableArray(e.data.time);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: _this.state.graphs[index].chartOptions.series[0].name,\n          data: e.data.prices\n        }];\n\n        _this.setState({\n          graphs: graphs,\n          loading: false\n        });\n      };\n\n      worker.postMessage(\"\".concat(graphs[index].cryptocurrency, \",\").concat(graphs[index].currency, \",\").concat(_this.state.jwt));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeGraph\", function (index) {\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      clearInterval(graphs[index].interval);\n      graphs = graphs.filter(function (item, i) {\n        return i !== index;\n      });\n\n      _this.setState({\n        graphs: graphs\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"liveData\", function (index) {\n      console.log(\"LIVE\", index);\n      var worker = new Worker(\"static/service-worker.js\");\n\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      worker.onmessage = function (e) {\n        graphs[index].chartOptions.xAxis.categories.push(e.data.currentTime);\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: _this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n        }];\n\n        _this.setState({\n          graphs: update(_this.state.graphs, _defineProperty({}, index, {\n            $set: graphs[index]\n          }))\n        });\n      };\n\n      worker.postMessage(\"\".concat(graphs[index].cryptocurrency, \",\").concat(graphs[index].currency, \",\").concat(_this.state.jwt));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeGraphLive\", function (e, index) {\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      if (e.target.checked) {\n        graphs[index].interval = setInterval(function () {\n          return _this.liveData(index);\n        }, 4000);\n\n        _this.setState({\n          graphs: graphs\n        });\n      } else {\n        clearInterval(graphs[index].interval);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CustomData, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var user, jwt;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                user = auth.getCurrentUser();\n                jwt = auth.getJwt();\n                this.setState({\n                  user: user,\n                  jwt: jwt\n                });\n                _context.next = 5;\n                return crypto.getCryptocurrencies().then(function (res) {\n                  console.log(res.data);\n\n                  _this2.setState({\n                    cryptocurrencies: res.data.cryptocurrencies,\n                    currencies: res.data.currencies,\n                    loaded: true\n                  });\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Hello \", this.state.user.name), __jsx(\"div\", {\n        className: \"form-group w-25\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, __jsx(\"select\", {\n        name: \"Cryptocurrency\",\n        onChange: this.changeCryptocurrency,\n        disabled: !this.state.loaded,\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, __jsx(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Select Cryptocurrency\"), this.state.cryptocurrencies.map(function (item) {\n        return __jsx(\"option\", {\n          value: item.id,\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        }, item.name, \" - \", item.symbol);\n      })), __jsx(\"select\", {\n        name: \"Currency\",\n        onChange: this.changeCryptocurrency,\n        disabled: !this.state.loaded,\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, __jsx(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Select Currency\"), this.state.currencies.map(function (item) {\n        return __jsx(\"option\", {\n          value: item.d,\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        }, item.name, \" - \", item.symbol);\n      }))), __jsx(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.addGraph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"+\"), __jsx(\"button\", {\n        className: \"btn btn-success\",\n        onClick: this.refreshAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"REFRESH ALL\"), this.state.graphs.length > 0 ? this.state.graphs.map(function (item, index) {\n        return __jsx(\"div\", {\n          className: \"row mt-4\",\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          className: \"col-md-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, __jsx(\"select\", {\n          name: \"Cryptocurrency\",\n          onChange: _this3.changeGraphCryptocurrency,\n          defaultValue: item.cryptocurrency,\n          className: \"form-control\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, _this3.state.cryptocurrencies.map(function (i) {\n          return __jsx(\"option\", {\n            value: i.id,\n            key: i.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237\n            },\n            __self: this\n          }, i.name, \" - \", i.symbol);\n        })), __jsx(\"select\", {\n          name: \"Currency\",\n          onChange: _this3.changeGraphCryptocurrency,\n          defaultValue: item.currency,\n          className: \"form-control\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, _this3.state.currencies.map(function (i) {\n          return __jsx(\"option\", {\n            value: i.id,\n            key: i.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238\n            },\n            __self: this\n          }, i.name, \" - \", i.symbol);\n        })), __jsx(\"input\", {\n          type: \"checkbox\",\n          onChange: function onChange(e) {\n            return _this3.changeGraphLive(e, index);\n          },\n          defaultValue: item.live,\n          className: \"form-control\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }), __jsx(\"button\", {\n          className: \"btn btn-success\",\n          onClick: function onClick() {\n            return _this3.refreshSingle(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, \"REFRESH\"), __jsx(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: function onClick() {\n            return _this3.removeGraph(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, \"-\"))), __jsx(\"div\", {\n          className: \"col-md-9 text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, !_this3.state.loading ? __jsx(ReactHighcharts, {\n          key: item.id,\n          highcharts: Highcharts,\n          config: item.chartOptions,\n          ref: \"chart\",\n          oneToOne: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }) : __jsx(\"img\", {\n          src: loading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        })));\n      }) : \"\");\n    }\n  }]);\n\n  return CustomData;\n}(Component);\n\nexport { CustomData as default };","map":{"version":3,"sources":["/home/laurentiu/Documents/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","ReactHighcharts","update","auth","crypto","loading","chartOptions","chart","zoomType","xAxis","type","dateTimeLabelFormats","day","title","text","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","jwt","data","graphs","cryptocurrencies","currencies","selectedCryptocurrency","selectedCurrency","workers","loaded","interval","worker","Worker","bkOptions","state","onmessage","e","console","log","name","series","prices","categories","time","push","id","cryptocurrency","value","currency","live","setState","postMessage","target","i","length","Array","index","clearInterval","filter","item","currentTime","currentPrice","$set","checked","setInterval","liveData","getCurrentUser","getJwt","getCryptocurrencies","then","res","changeCryptocurrency","map","symbol","d","addGraph","refreshAll","changeGraphCryptocurrency","changeGraphLive","refreshSingle","removeGraph"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\nimport ReactHighcharts from 'react-highcharts';\nimport update from \"react-addons-update\";\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nimport loading from \"../src/91.gif\";\n\n\nconst chartOptions = {\n  chart: {zoomType: 'x'},\n      xAxis: { \n\t\t  \ttype: 'datetime',\n\t\t  \tdateTimeLabelFormats: {day: '%d-%m-%Y - %h:%m'},\n        title: {text: 'Date'}\n\t\t},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {hover: {lineWidth: 1}},\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    jwt: \"\",\n    data: [],\n    graphs: [],\n    cryptocurrencies: [],\n    currencies : [],\n    selectedCryptocurrency: {},\n    selectedCurrency: {},\n    workers: 0,\n    loading: false,\n    loaded: false,\n\t  interval: [],\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({user,jwt});\n    await crypto.getCryptocurrencies().then(res => {\n      console.log(res.data);\n      this.setState({\n        cryptocurrencies: res.data.cryptocurrencies,\n        currencies: res.data.currencies,\n        loaded: true\n      })\n    });\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n  }\n\n  addGraph = () => {\n    const worker = new Worker(\"static/service-worker.js\");\n    const bkOptions = {...chartOptions};\n    const graphs = [...this.state.graphs];\n    worker.onmessage = e => {\n\t\tconsole.log(e.data);\n\t\tbkOptions.title =  {text: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name} exchange rate over time`},\n\t\tbkOptions.series = [{\n\t\t\ttype: \"line\",\n\t\t\tname: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name}`,\n\t\t\tdata: e.data.prices\n\t\t}]\n\t\tbkOptions.xAxis.categories = [...e.data.time];\n\t\tgraphs.push({\n\t\t\tid: Date.now(),\n\t\t\tchartOptions: bkOptions,\n\t\t\tcryptocurrency: this.state.selectedCryptocurrency.value,\n\t\t\tcurrency: this.state.selectedCurrency.value,\n\t\t\tlive: false\n    \t})\n      console.log(graphs);\n      this.setState({\n        graphs: graphs,\n        workers: this.state.workers+1,\n        interval: \"\"\n      })\n    }\n    worker.postMessage(`${this.state.selectedCryptocurrency.value},${this.state.selectedCurrency.value},${this.state.jwt}`);\n    \n  }\n\n  changeCryptocurrency = (e) => {\n    console.log(e.target.value);\n    let name = \"\";\n    for(let i=0; i<this.state.cryptocurrencies.length; i++){\n      if(this.state.cryptocurrencies[i].id === e.target.value){\n        name = this.state.cryptocurrencies[i].name;\n        console.log(name);\n        break;\n      }\n      \n    }\n    console.log(name);\n    /* const value = JSON.parse(e.target.value);\n    console.log(value);\n    this.setState({\n      [`selected${e.target.name}`]:{\n        value: value.id,\n        name: value.name\n      }\n    }); */\n  }\n\n  refreshAll = () => {\n\tlet workers = new Array(this.state.workers);\n\tconst graphs = [...this.state.graphs];\n\tthis.setState({loading: true});\n\tfor(let i=0; i<this.state.workers; i++){\n\tworkers[i] = new Worker(\"static/service-worker.js\");\n\tworkers[i].onmessage = e => {\n\t\tgraphs[i].chartOptions.xAxis.categories = [...e.data.time];\n\t\tgraphs[i].chartOptions.series = [{\n\t\ttype: \"line\",\n\t\tname: this.state.graphs[i].chartOptions.series[0].name,\n\t\tdata: e.data.prices\n\t\t}]\n\t\tthis.setState({\n\t\t\tgraphs: graphs,\n\t\t\tloading: false\n\t\t})\n\t}\n\tworkers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n\t}\n  }\n\n  refreshSingle = (index) => {\n    const worker = new Worker(\"static/service-worker.js\");\n    const graphs = [...this.state.graphs];\n    this.setState({loading: true});\n    worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories = [...e.data.time];\n        graphs[index].chartOptions.series = [{\n            type: \"line\",\n            name: this.state.graphs[index].chartOptions.series[0].name,\n            data: e.data.prices\n        }]\n        this.setState({\n          graphs: graphs,\n          loading: false\n        })\n      }\n    worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n  }\n\n  removeGraph = (index) => {\n    let graphs = [...this.state.graphs];\n    clearInterval(graphs[index].interval);\n    graphs = graphs.filter((item,i) => i !== index);\n    this.setState({graphs});\n  }\n\n  liveData = (index) => {\n    console.log(\"LIVE\",index);\n    const worker = new Worker(\"static/service-worker.js\");\n    const graphs = [...this.state.graphs];\n\t  worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories.push(e.data.currentTime);\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n\t\t}]\n        this.setState({\n          \tgraphs: update(this.state.graphs, {[index]: {$set: graphs[index]}})\n        })\n      }\n\t  worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n  }\n\n  changeGraphLive = (e,index) => {\n    const graphs = [...this.state.graphs];\n    if(e.target.checked){\n      graphs[index].interval = setInterval(() => this.liveData(index), 4000);\n      this.setState({graphs});\n    }\n    else{\n      clearInterval(graphs[index].interval);\n    }\n  }\n\n  render() {\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          <div className=\"form-group w-25\">\n            <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency} disabled={!this.state.loaded} className=\"form-control\"><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n            <select name=\"Currency\" onChange={this.changeCryptocurrency} disabled={!this.state.loaded} className=\"form-control\"><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.d} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n          </div>\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH ALL</button>\n            {this.state.graphs.length > 0 ? \n\t\t\t\tthis.state.graphs.map((item,index) => \n\t\t\t\t\t<div className=\"row mt-4\" key={item.id}>\n\t\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<select name=\"Cryptocurrency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.cryptocurrency} className=\"form-control\">{this.state.cryptocurrencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\n\t\t\t\t\t\t\t\t<select name=\"Currency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.currency} className=\"form-control\">{this.state.currencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={(e) => this.changeGraphLive(e,index)} defaultValue={item.live} className=\"form-control\"/>\n\t\t\t\t\t\t\t\t<button className=\"btn btn-success\" onClick={() => this.refreshSingle(index)}>REFRESH</button>\n\t\t\t\t\t\t\t\t<button className=\"btn btn-danger\" onClick={() => this.removeGraph(index)}>-</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-md-9 text-center\">\n\t\t\t\t\t\t\t{!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true}/> : <img src={loading}/>}\n\t\t\t\t\t\t</div> \n\t\t\t\t\t</div>\n            ): \"\"}\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}