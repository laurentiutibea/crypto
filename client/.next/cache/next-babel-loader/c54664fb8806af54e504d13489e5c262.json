{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/laurentiu/Documents/crypto/client/pages/customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x',\n    backgroundColor: \"#eeeeee\"\n  },\n  subtitle: {\n    text: 'Click and drag in the plot area to zoom in'\n  },\n  xAxis: {\n    type: 'datetime'\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class CustomData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: [],\n      graphs: [],\n      cryptocurrencies: [{\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      }, {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }],\n      currencies: [{\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      }, {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }],\n      selectedCryptocurrency: \"\",\n      selectedCurrency: \"\",\n      chartOptions: {}\n    });\n\n    _defineProperty(this, \"addGraph\", () => {\n      const myWorker = new Worker(\"static/service-worker.js\");\n\n      const bkOptions = _objectSpread({}, chartOptions);\n\n      const graphs = [...this.state.graphs];\n\n      myWorker.onmessage = e => {\n        bkOptions.title = {\n          text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`\n        }, bkOptions.series = [{\n          type: \"area\",\n          name: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n          data: e.data\n        }];\n        graphs.push({\n          id: this.state.selectedCryptocurrency + this.state.selectedCurrency,\n          chartOptions: bkOptions\n        });\n        console.log(graphs);\n        this.setState({\n          data: e.data,\n          graphs: graphs\n        });\n      };\n\n      myWorker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n      /* const graphs = [...this.state.graphs];\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency\n      })\n      this.setState({graphs}); */\n    });\n\n    _defineProperty(this, \"changeCryptocurrency\", e => {\n      console.log(e.target.value);\n      this.setState({\n        [`selected${e.target.name}`]: e.target.value\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n       const bkOptions = {...this.state.chartOptions};\n       bkOptions.series = [{\n         type: \"area\",\n         name: \"BTC to EUR\",\n         data: res.data\n       }]\n       this.setState({\n         data: res.data,\n         chartOptions: bkOptions\n         })\n     }); */\n    //console.log(this.state.data);\n  }\n\n  render() {\n    const selectCC = __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: this.changeCryptocurrency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Select Cryptocurrency\"), this.state.cryptocurrencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)));\n\n    const selectC = __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: this.changeCryptocurrency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Select Currency\"), this.state.currencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)));\n\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Hello \", this.state.user.name), selectCC, selectC, __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"+\"), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"+\"), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      className: \"col-md-6\",\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, __jsx(HighchartsReact, {\n      key: item.id,\n      highcharts: Highcharts,\n      options: item.chartOptions,\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))) : \"\"));\n  }\n\n}","map":{"version":3,"sources":["/home/laurentiu/Documents/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","chartOptions","chart","zoomType","backgroundColor","subtitle","text","xAxis","type","yAxis","title","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","jwt","data","graphs","cryptocurrencies","id","name","symbol","currencies","selectedCryptocurrency","selectedCurrency","myWorker","Worker","bkOptions","state","onmessage","e","series","push","console","log","setState","postMessage","target","value","componentDidMount","getCurrentUser","getJwt","render","selectCC","changeCryptocurrency","map","item","selectC","addGraph","length","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nconst chartOptions = {\n  chart: {zoomType: 'x' , backgroundColor: \"#eeeeee\"},\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\n      xAxis: { type: 'datetime'},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {\n                  hover: {lineWidth: 1}\n              },\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    jwt: \"\",\n    data: [],\n    graphs: [],\n    cryptocurrencies: [\n      {\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      },\n      {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }\n    ],\n    currencies : [\n      {\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      },\n      {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }\n    ],\n    selectedCryptocurrency: \"\",\n    selectedCurrency: \"\",\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({user,jwt});\n   /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n    //console.log(this.state.data);\n  }\n\n  addGraph = () => {\n    \n    const myWorker = new Worker(\"static/service-worker.js\");\n    const bkOptions = {...chartOptions};\n    const graphs = [...this.state.graphs];\n    myWorker.onmessage = e => {\n      bkOptions.title =  {text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`},\n      bkOptions.series = [{\n        type: \"area\",\n        name: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n        data: e.data\n      }]\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency,\n          chartOptions: bkOptions\n      })\n      console.log(graphs);\n      this.setState({\n        data: e.data,\n        graphs: graphs\n        })\n    }\n    myWorker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n      /* const graphs = [...this.state.graphs];\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency\n      })\n      this.setState({graphs}); */\n  }\n\n  changeCryptocurrency = (e) => {\n    console.log(e.target.value)\n    this.setState({[`selected${e.target.name}`]:e.target.value});\n  }\n\n  render() {\n    const selectCC = <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    const selectC = <select name=\"Currency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          {selectCC}\n          {selectC}\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n\n          <div className=\"row\">\n            {this.state.graphs.length > 0 ? \n                this.state.graphs.map((item,index) => \n                    <div className=\"col-md-6\" key={item.id}>\n                        {/* {selectCC}\n                        {selectC} */}\n                        <HighchartsReact key={item.id} highcharts={Highcharts} options={item.chartOptions} oneToOne={true}/>\n                    </div> \n            ): \"\"}\n          </div>\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}