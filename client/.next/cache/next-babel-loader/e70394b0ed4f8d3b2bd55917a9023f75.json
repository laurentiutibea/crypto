{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\WEB\\\\crypto\\\\client\\\\pages\\\\saveddata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport ReactHighcharts from 'react-highcharts';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nimport loading from \"../src/91.gif\";\nimport cryptoImg from \"../src/crypto-text.png\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x'\n  },\n  xAxis: {\n    type: 'datetime',\n    dateTimeLabelFormats: {\n      day: '%d-%m-%Y - %h:%m'\n    },\n    title: {\n      text: 'Date'\n    }\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class SavedData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: {\n        graphs: []\n      },\n      loaded: false,\n      graphs: []\n    });\n\n    _defineProperty(this, \"refreshData\", async () => {\n      this.setState({\n        graphs: []\n      });\n      const {\n        data\n      } = await crypto.getSavedData(this.state.user._id);\n      console.log(data);\n\n      const bkOptions = _objectSpread({}, chartOptions);\n\n      const graphs = [...this.state.graphs];\n\n      for (let i = 0; i < data.graphs.length; i++) {\n        bkOptions.title = {\n          text: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name} exchange rate over time`\n        }, bkOptions.series = [{\n          type: \"line\",\n          name: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name}`,\n          data: data.graphs[i].series.data\n        }];\n        bkOptions.xAxis.categories = data.graphs[i].categories;\n        graphs.push({\n          id: _Date$now(),\n          chartOptions: bkOptions,\n          cryptocurrency: data.graphs[i].cryptocurrency.name,\n          currency: data.graphs[i].currency.name,\n          live: false,\n          image: data.graphs[i].image,\n          id: data.graphs[i].date\n        });\n      }\n\n      this.setState({\n        data,\n        loaded: true,\n        graphs\n      });\n    });\n\n    _defineProperty(this, \"compare\", (e, index) => {\n      console.log(e.target.checked, index);\n      const worker = new Worker(\"static/service-worker.js\");\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n        }, {\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n        }];\n        this.setState({\n          graphs: update(this.state.graphs, {\n            [index]: {\n              $set: graphs[index]\n            }\n          })\n        });\n      };\n\n      worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n    });\n  }\n\n  async componentDidMount() {\n    const user = await auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    this.refreshData();\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"w-50 mx-auto text-center pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: cryptoImg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), __jsx(\"h1\", {\n      style: {\n        fontFamily: \"Courier New\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Saved Data\")), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), this.state.loaded && __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Refresh\")), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.refreshData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-sync\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })))), this.state.loaded ? __jsx(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      key: item.id,\n      className: \"pt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), __jsx(\"img\", {\n      src: item.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"row mt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-9 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, !this.state.loading ? __jsx(ReactHighcharts, {\n      key: item.id,\n      highcharts: Highcharts,\n      config: item.chartOptions,\n      ref: \"chart\",\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }) : __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: item.cryptocurrency,\n      className: \"form-control text-center\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: item.currency,\n      className: \"form-control text-center\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Compare with current data\")), __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: e => this.compare(e, index),\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Delete\")), __jsx(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: () => this.removeGraph(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-minus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }))))))))) : \"\") : __jsx(\"div\", {\n      className: \"w-50 mx-auto text-center\",\n      style: {\n        paddingTop: \"30vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/WEB/crypto/client/pages/saveddata.js"],"names":["React","Component","Layout","Highcharts","ReactHighcharts","auth","crypto","loading","cryptoImg","chartOptions","chart","zoomType","xAxis","type","dateTimeLabelFormats","day","title","text","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","SavedData","user","jwt","data","graphs","loaded","setState","getSavedData","state","_id","console","log","bkOptions","i","length","cryptocurrency","name","currency","series","categories","push","id","live","image","date","e","index","target","checked","worker","Worker","onmessage","update","$set","postMessage","componentDidMount","getCurrentUser","getJwt","refreshData","render","fontFamily","map","item","compare","removeGraph","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport ReactHighcharts from 'react-highcharts';\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nimport loading from \"../src/91.gif\";\r\nimport cryptoImg from \"../src/crypto-text.png\";\r\n\r\nconst chartOptions = {\r\n\tchart: { zoomType: 'x' },\r\n\txAxis: {\r\n\t\ttype: 'datetime',\r\n\t\tdateTimeLabelFormats: { day: '%d-%m-%Y - %h:%m' },\r\n\t\ttitle: { text: 'Date' }\r\n\t},\r\n\tyAxis: {\r\n\t\ttitle: { text: 'Exchange rate' }\r\n\t},\r\n\tlegend: { enabled: false },\r\n\tplotOptions: {\r\n\t\tarea: {\r\n\t\t\tfillColor: {\r\n\t\t\t\tlinearGradient: {\r\n\t\t\t\t\tx1: 0,\r\n\t\t\t\t\ty1: 0,\r\n\t\t\t\t\tx2: 0,\r\n\t\t\t\t\ty2: 1\r\n\t\t\t\t},\r\n\t\t\t\tstops: [\r\n\t\t\t\t\t[0, \"#7cb5ec\"],\r\n\t\t\t\t\t[0.5, \"#7cb5ec80\"],\r\n\t\t\t\t\t[0.9, \"#7cb5ff33\"]\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tmarker: { radius: 2 },\r\n\t\t\tlineWidth: 1,\r\n\t\t\tstates: { hover: { lineWidth: 1 } },\r\n\t\t\tthreshold: null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default class SavedData extends Component {\r\n    state = {\r\n        user: {},\r\n        jwt: \"\",\r\n        data: {\r\n            graphs: []\r\n        },\r\n        loaded: false,\r\n        graphs: []\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const user = await auth.getCurrentUser();\r\n        const jwt = auth.getJwt();\r\n        this.setState({ user, jwt });\r\n        this.refreshData();\r\n    }\r\n\r\n    refreshData = async () => {\r\n        this.setState({graphs:[]});\r\n        const {data} = await crypto.getSavedData(this.state.user._id);\r\n        console.log(data);\r\n        const bkOptions = { ...chartOptions };\r\n        const graphs = [...this.state.graphs];\r\n        for(let i=0; i<data.graphs.length; i++){\r\n            bkOptions.title = { text: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name} exchange rate over time` },\r\n\t\t\t\tbkOptions.series = [{\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tname: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name}`,\r\n\t\t\t\t\tdata: data.graphs[i].series.data\r\n\t\t\t\t}]\r\n\t\t\tbkOptions.xAxis.categories = data.graphs[i].categories;\r\n\t\t\tgraphs.push({\r\n\t\t\t\tid: Date.now(),\r\n\t\t\t\tchartOptions: bkOptions,\r\n\t\t\t\tcryptocurrency: data.graphs[i].cryptocurrency.name,\r\n\t\t\t\tcurrency: data.graphs[i].currency.name,\r\n\t\t\t\tlive: false,\r\n                image: data.graphs[i].image,\r\n                id: data.graphs[i].date\r\n\t\t\t})\r\n        }\r\n        this.setState({data, loaded: true, graphs})\r\n    }\r\n\r\n    compare = (e,index) => {\r\n        console.log(e.target.checked, index);\r\n        const worker = new Worker(\"static/service-worker.js\");\r\n\t\tconst graphs = [...this.state.graphs];\r\n\t\tworker.onmessage = e => {\r\n\t\t\tgraphs[index].chartOptions.series = [\r\n                {\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tname: this.state.graphs[index].chartOptions.series[0].name,\r\n\t\t\t\tdata: graphs[index].chartOptions.series[0].data\r\n            },\r\n            {\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tname: this.state.graphs[index].chartOptions.series[0].name,\r\n\t\t\t\tdata: graphs[index].chartOptions.series[0].data\r\n\t\t\t}]\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraphs: update(this.state.graphs, { [index]: { $set: graphs[index] } })\r\n\t\t\t})\r\n\t\t}\r\n\t\tworker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <div className=\"w-50 mx-auto text-center pt-5\">\r\n\t\t\t\t\t<img src={cryptoImg} />\r\n\t\t\t\t\t<h1 style={{fontFamily: \"Courier New\"}}><strong>Saved Data</strong></h1>\r\n\t\t\t\t\t<hr/>\r\n                    {this.state.loaded && <div className=\"col-md-12 mt-3\">\r\n                        <p><strong>Refresh</strong></p>\r\n                        <button className=\"btn btn-success\" onClick={this.refreshData}><i className=\"fas fa-sync\"/></button>\r\n                    </div>}\r\n                </div>\r\n                {this.state.loaded ?\r\n                    <div className=\"text-center\">\r\n                        {this.state.graphs.length > 0 ?\r\n                            this.state.graphs.map((item, index) =>\r\n                                <div key={item.id} className=\"pt-3\">\r\n                                    <hr/>\r\n                                    <img src={item.image} />\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"col-md-9 text-center\">\r\n                                            {!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true} /> : <img src={loading} />}\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <div className=\"pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" value={item.cryptocurrency} className=\"form-control text-center\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-2\">\r\n                                                <input type=\"text\" value={item.currency} className=\"form-control text-center\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12 mt-3\">\r\n                                                        <p><strong>Compare with current data</strong></p>\r\n                                                        <input type=\"checkbox\" onChange={(e) => this.compare(e, index)} className=\"form-control\" />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-12 mt-3\">\r\n                                                        <p><strong>Delete</strong></p>\r\n                                                        <button className=\"btn btn-danger\" onClick={() => this.removeGraph(index)}><i className=\"fas fa-minus\"/></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            ) : \"\"}\r\n                    </div>\r\n\t\t\t\t: <div className=\"w-50 mx-auto text-center\" style={{paddingTop: \"30vh\"}}><img src={loading} /></div>}\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}