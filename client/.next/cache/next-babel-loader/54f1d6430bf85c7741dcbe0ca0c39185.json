{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\WEB\\\\crypto\\\\client\\\\pages\\\\customdata.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nvar CustomData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomData, _Component);\n\n  function CustomData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CustomData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      user: {},\n      data: [],\n      graphs: [],\n      options: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addGraph\", function () {\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      graphs.push({\n        id: 1,\n        data: {\n          name: \"Bitcoin\"\n        }\n      });\n\n      _this.setState({\n        graphs: graphs\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(CustomData, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var user, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                user = auth.getCurrentUser();\n                this.setState({\n                  user: user\n                });\n                options = {\n                  chart: {\n                    zoomType: 'x'\n                  },\n                  title: {\n                    text: 'BTC to EUR exchange rate over time'\n                  },\n                  subtitle: {\n                    text: 'Click and drag in the plot area to zoom in'\n                  },\n                  xAxis: {\n                    type: 'datetime'\n                  },\n                  yAxis: {\n                    title: {\n                      text: 'Exchange rate'\n                    }\n                  },\n                  legend: {\n                    enabled: false\n                  },\n                  plotOptions: {\n                    area: {\n                      fillColor: {\n                        linearGradient: {\n                          x1: 0,\n                          y1: 0,\n                          x2: 0,\n                          y2: 1\n                        }\n                      },\n                      marker: {\n                        radius: 2\n                      },\n                      lineWidth: 1,\n                      states: {\n                        hover: {\n                          lineWidth: 1\n                        }\n                      },\n                      threshold: null\n                    }\n                  }\n                };\n                _context.next = 5;\n                return crypto.getCurrencies().then(function (res) {\n                  options.series = _this2.setState({\n                    data: res.data,\n                    options: {\n                      title: {\n                        text: 'BTC to EUR exchange rate over time'\n                      },\n                      subtitle: {\n                        text: 'Click and drag in the plot area to zoom in'\n                      },\n                      xAxis: {\n                        type: 'datetime'\n                      },\n                      yAxis: {\n                        title: {\n                          text: 'Exchange rate'\n                        }\n                      },\n                      plotOptions: {\n                        area: {\n                          fillColor: {\n                            linearGradient: {\n                              x1: 0,\n                              y1: 0,\n                              x2: 0,\n                              y2: 1\n                            }\n                          },\n                          marker: {\n                            radius: 2\n                          },\n                          lineWidth: 1,\n                          states: {\n                            hover: {\n                              lineWidth: 1\n                            }\n                          },\n                          threshold: null\n                        }\n                      },\n                      series: [{\n                        type: \"area\",\n                        name: \"BTC to EUR\",\n                        data: res.data\n                      }]\n                    }\n                  });\n                });\n\n              case 5:\n                //options.series[0].data = this.state.data;\n                console.log(this.state.options);\n                console.log(this.state.data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      //const select = <select>{this.state.data.data.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Hello \", this.state.user.name), __jsx(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.addGraph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"+\"), __jsx(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.state.graphs.length > 0 ? this.state.graphs.map(function (item) {\n        return __jsx(HighchartsReact, {\n          key: item.id,\n          highcharts: Highcharts,\n          options: _this3.state.options,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        });\n      }) : \"\"));\n    }\n  }]);\n\n  return CustomData;\n}(Component);\n\nexport { CustomData as default };","map":{"version":3,"sources":["D:/WEB/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","CustomData","user","data","graphs","options","state","push","id","name","setState","getCurrentUser","chart","zoomType","title","text","subtitle","xAxis","type","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","marker","radius","lineWidth","states","hover","threshold","getCurrencies","then","res","series","console","log","addGraph","length","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nexport default class CustomData extends Component {\r\n  state = {\r\n    user: {},\r\n    data: [],\r\n    graphs: [],\r\n    options: {}\r\n  }\r\n  \r\n  async componentDidMount() {\r\n\tconst user = auth.getCurrentUser();\r\n    this.setState({user});\r\n    const options = {\r\n      chart: {zoomType: 'x' },\r\n      title: {text: 'BTC to EUR exchange rate over time'},\r\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\r\n      xAxis: { type: 'datetime'},\r\n      yAxis: {\r\n          title: {text: 'Exchange rate'}\r\n      },\r\n      legend: {enabled: false},\r\n      plotOptions: {\r\n          area: {\r\n              fillColor: {\r\n                  linearGradient: {\r\n                      x1: 0,\r\n                      y1: 0,\r\n                      x2: 0,\r\n                      y2: 1\r\n                  },\r\n              },\r\n              marker: {radius: 2},\r\n              lineWidth: 1,\r\n              states: {\r\n                  hover: {lineWidth: 1}\r\n              },\r\n              threshold: null\r\n          }\r\n      }\r\n    }\r\n    await crypto.getCurrencies().then(res => {\r\n      options.series = \r\n      this.setState({\r\n        data: res.data,\r\n        options: {\r\n          title: {text: 'BTC to EUR exchange rate over time'},\r\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\r\n      xAxis: { type: 'datetime'},\r\n      yAxis: {\r\n          title: {text: 'Exchange rate'}\r\n      },\r\n      plotOptions: {\r\n        area: {\r\n            fillColor: {\r\n                linearGradient: {\r\n                    x1: 0,\r\n                    y1: 0,\r\n                    x2: 0,\r\n                    y2: 1\r\n                },\r\n            },\r\n            marker: {radius: 2},\r\n            lineWidth: 1,\r\n            states: {\r\n                hover: {lineWidth: 1}\r\n            },\r\n            threshold: null\r\n        }\r\n    },\r\n          series: [{\r\n            type: \"area\",\r\n            name: \"BTC to EUR\",\r\n            data: res.data\r\n          }]\r\n        }})\r\n    });\r\n    //options.series[0].data = this.state.data;\r\n    console.log(this.state.options);    console.log(this.state.data);\r\n  }\r\n\r\n  addGraph = () => {\r\n      const graphs = [...this.state.graphs];\r\n      graphs.push({\r\n          id: 1,\r\n          data: {\r\n              name: \"Bitcoin\"\r\n          }\r\n      })\r\n      this.setState({graphs});\r\n  }\r\n\r\n  render() {\r\n    //const select = <select>{this.state.data.data.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n\r\n    return (\r\n      <Layout>\r\n          <p>Hello {this.state.user.name}</p>\r\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\r\n          <div className=\"row\">\r\n            {this.state.graphs.length > 0 ? \r\n              this.state.graphs.map(item => <HighchartsReact key={item.id} highcharts={Highcharts} options={this.state.options}/>): \"\"}\r\n            {/* {this.state.graphs.length > 0 ? \r\n                this.state.graphs.map(item => \r\n                    <div className=\"col-md-6\" key={item.id}>\r\n                        {select}\r\n                        <p>{item.data.name}</p>\r\n                        <HighchartsReact highcharts={Highcharts} options={this.state.options}/>\r\n                    </div> \r\n            ): \"\"} */}\r\n          </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}