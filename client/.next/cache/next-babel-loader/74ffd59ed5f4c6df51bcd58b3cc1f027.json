{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\WEB\\\\crypto\\\\client\\\\pages\\\\saveddata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport ReactHighcharts from 'react-highcharts';\nimport update from \"immutability-helper\";\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nimport loading from \"../src/91.gif\";\nimport cryptoImg from \"../src/crypto-text.png\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x'\n  },\n  xAxis: {\n    type: 'datetime',\n    dateTimeLabelFormats: {\n      day: '%d-%m-%Y - %h:%m'\n    },\n    title: {\n      text: 'Date'\n    }\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class SavedData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: {\n        graphs: []\n      },\n      loaded: false,\n      graphs: []\n    });\n\n    _defineProperty(this, \"refreshData\", async () => {\n      let graphs = [];\n      if (this.state.graphs.length === 0) graphs = [];else this.setState({\n        graphs: []\n      });\n      const {\n        data\n      } = await crypto.getSavedData(this.state.user._id);\n      console.log(data);\n\n      for (let i = 0; i < data.graphs.length; i++) {\n        let bkOptions = _objectSpread({}, chartOptions);\n\n        bkOptions.title = {\n          text: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name} exchange rate over time`\n        };\n        bkOptions.series = [{\n          type: \"line\",\n          name: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name}`,\n          data: data.graphs[i].series.data\n        }];\n        bkOptions.xAxis.categories = data.graphs[i].categories;\n        graphs.push({\n          chartOptions: bkOptions,\n          cryptocurrency: {\n            name: data.graphs[i].cryptocurrency.name,\n            value: data.graphs[i].cryptocurrency.value\n          },\n          currency: {\n            name: data.graphs[i].currency.name,\n            value: data.graphs[i].currency.value\n          },\n          live: false,\n          image: data.graphs[i].image,\n          graphId: data.graphs[i].graphId,\n          date: data.graphs[i].date\n        });\n      }\n\n      this.setState({\n        data,\n        loaded: true,\n        graphs\n      });\n    });\n\n    _defineProperty(this, \"refreshSingle\", index => {\n      const graphs = [...this.state.graphs];\n      graphs[index].chartOptions.title = {\n        text: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency} exchange rate over time`\n      };\n      graphs[index].chartOptions.series = [{\n        type: \"line\",\n        name: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency.name}`,\n        data: graphs[index].chartOptions.series[0].data\n      }];\n      this.setState({\n        graphs: graphs\n      });\n    });\n\n    _defineProperty(this, \"compare\", (e, index) => {\n      if (e.target.checked) {\n        const worker = new Worker(\"static/service-worker.js\");\n        const graphs = [...this.state.graphs];\n        console.log(graphs[index]);\n\n        worker.onmessage = e => {\n          graphs[index].chartOptions.series = [{\n            type: \"line\",\n            name: this.state.graphs[index].chartOptions.series[0].name,\n            data: graphs[index].chartOptions.series[0].data\n          }, {\n            type: \"line\",\n            name: `Current ${this.state.graphs[index].chartOptions.series[0].name}`,\n            data: e.data.prices\n          }];\n          this.setState({\n            graphs\n          });\n        };\n\n        worker.postMessage(`${graphs[index].cryptocurrency.value},${graphs[index].currency.value},${this.state.jwt}`);\n      } else this.refreshSingle(index);\n    });\n\n    _defineProperty(this, \"removeGraph\", async index => {\n      let graphs = [...this.state.graphs];\n      graphs = graphs.filter((item, i) => i !== index);\n      let bkGraphs = [];\n      graphs.forEach(element => {\n        bkGraphs.push({\n          categories: element.chartOptions.xAxis.categories,\n          series: element.chartOptions.series,\n          graphId: element.id,\n          cryptocurrency: {\n            value: element.cryptocurrency.value,\n            name: element.cryptocurrency.name\n          },\n          currency: {\n            value: element.currency.value,\n            name: element.currency.name\n          },\n          date: new Date(),\n          image: element.image\n        });\n      });\n      const graph = {\n        userId: this.state.user._id,\n        graphs: bkGraphs\n      };\n      await crypto.replaceGraphs(graph);\n      this.setState({\n        graphs\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const user = await auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    this.refreshData();\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"w-50 mx-auto text-center pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: cryptoImg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), __jsx(\"h1\", {\n      style: {\n        fontFamily: \"Courier New\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Saved Data\")), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), this.state.loaded && __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Refresh\")), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.refreshData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-sync\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })))), this.state.loaded ? __jsx(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      key: item.graphId,\n      className: \"pt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), __jsx(\"img\", {\n      src: item.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"row mt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-9 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, !this.state.loading ? __jsx(ReactHighcharts, {\n      key: item.id,\n      highcharts: Highcharts,\n      config: item.chartOptions,\n      ref: \"chart\",\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }) : __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: item.cryptocurrency.name,\n      className: \"form-control text-center\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: item.currency.name,\n      className: \"form-control text-center\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Compare with current data\")), __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: e => this.compare(e, index),\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Delete\")), __jsx(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: () => this.removeGraph(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-minus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: \"col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Replace\")), __jsx(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => this.removeGraph(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-exchange-alt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: \"col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Save\")), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => this.removeGraph(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-save\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }))))))))) : \"\") : __jsx(\"div\", {\n      className: \"w-50 mx-auto text-center\",\n      style: {\n        paddingTop: \"30vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/WEB/crypto/client/pages/saveddata.js"],"names":["React","Component","Layout","Highcharts","ReactHighcharts","update","auth","crypto","loading","cryptoImg","chartOptions","chart","zoomType","xAxis","type","dateTimeLabelFormats","day","title","text","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","SavedData","user","jwt","data","graphs","loaded","state","length","setState","getSavedData","_id","console","log","i","bkOptions","cryptocurrency","name","currency","series","categories","push","value","live","image","graphId","date","index","e","target","checked","worker","Worker","onmessage","prices","postMessage","refreshSingle","filter","item","bkGraphs","forEach","element","id","Date","graph","userId","replaceGraphs","componentDidMount","getCurrentUser","getJwt","refreshData","render","fontFamily","map","compare","removeGraph","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport ReactHighcharts from 'react-highcharts';\r\nimport update from \"immutability-helper\";\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nimport loading from \"../src/91.gif\";\r\nimport cryptoImg from \"../src/crypto-text.png\";\r\n\r\nconst chartOptions = {\r\n\tchart: { zoomType: 'x' },\r\n\txAxis: {\r\n\t\ttype: 'datetime',\r\n\t\tdateTimeLabelFormats: { day: '%d-%m-%Y - %h:%m' },\r\n\t\ttitle: { text: 'Date' }\r\n\t},\r\n\tyAxis: {\r\n\t\ttitle: { text: 'Exchange rate' }\r\n\t},\r\n\tlegend: { enabled: false },\r\n\tplotOptions: {\r\n\t\tarea: {\r\n\t\t\tfillColor: {\r\n\t\t\t\tlinearGradient: {\r\n\t\t\t\t\tx1: 0,\r\n\t\t\t\t\ty1: 0,\r\n\t\t\t\t\tx2: 0,\r\n\t\t\t\t\ty2: 1\r\n\t\t\t\t},\r\n\t\t\t\tstops: [\r\n\t\t\t\t\t[0, \"#7cb5ec\"],\r\n\t\t\t\t\t[0.5, \"#7cb5ec80\"],\r\n\t\t\t\t\t[0.9, \"#7cb5ff33\"]\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tmarker: { radius: 2 },\r\n\t\t\tlineWidth: 1,\r\n\t\t\tstates: { hover: { lineWidth: 1 } },\r\n\t\t\tthreshold: null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default class SavedData extends Component {\r\n    state = {\r\n        user: {},\r\n        jwt: \"\",\r\n        data: {\r\n            graphs: []\r\n        },\r\n        loaded: false,\r\n        graphs: []\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const user = await auth.getCurrentUser();\r\n        const jwt = auth.getJwt();\r\n        this.setState({ user, jwt });\r\n        this.refreshData();\r\n    }\r\n\r\n    refreshData = async () => {\r\n        let graphs = [];\r\n        if(this.state.graphs.length === 0) graphs = [];\r\n        else this.setState({graphs:[]});\r\n        const {data} = await crypto.getSavedData(this.state.user._id);\r\n        console.log(data);\r\n        for(let i=0; i<data.graphs.length; i++){\r\n            let bkOptions = { ...chartOptions };\r\n            bkOptions.title = { text: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name} exchange rate over time` };\r\n            bkOptions.series = [{\r\n                type: \"line\",\r\n                name: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name}`,\r\n                data: data.graphs[i].series.data\r\n            }];\r\n\t\t\tbkOptions.xAxis.categories = data.graphs[i].categories;\r\n\t\t\tgraphs.push({\r\n\t\t\t\tchartOptions: bkOptions,\r\n\t\t\t\tcryptocurrency: {\r\n                    name: data.graphs[i].cryptocurrency.name,\r\n                    value: data.graphs[i].cryptocurrency.value\r\n                },\r\n\t\t\t\tcurrency: {\r\n                    name: data.graphs[i].currency.name,\r\n                    value: data.graphs[i].currency.value\r\n                },\r\n\t\t\t\tlive: false,\r\n                image: data.graphs[i].image,\r\n                graphId: data.graphs[i].graphId,\r\n                date: data.graphs[i].date\r\n\t\t\t});\r\n        }\r\n        this.setState({data, loaded: true, graphs})\r\n    }\r\n\r\n    refreshSingle = (index) => {\r\n        const graphs = [...this.state.graphs];\r\n        graphs[index].chartOptions.title = { text: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency} exchange rate over time` };\r\n        graphs[index].chartOptions.series = [{\r\n            type: \"line\",\r\n            name: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency.name}`,\r\n            data: graphs[index].chartOptions.series[0].data\r\n        }];\r\n        this.setState({\r\n            graphs: graphs\r\n        })\r\n    }\r\n\r\n    compare = (e,index) => {\r\n        if(e.target.checked){\r\n            const worker = new Worker(\"static/service-worker.js\");\r\n            const graphs = [...this.state.graphs];\r\n            console.log(graphs[index]);\r\n            worker.onmessage = e => {\r\n                graphs[index].chartOptions.series = [\r\n                {\r\n                    type: \"line\",\r\n                    name: this.state.graphs[index].chartOptions.series[0].name,\r\n                    data: graphs[index].chartOptions.series[0].data\r\n                },\r\n                {\r\n                    type: \"line\",\r\n                    name: `Current ${this.state.graphs[index].chartOptions.series[0].name}`,\r\n                    data: e.data.prices\r\n                }]\r\n                this.setState({\r\n                    graphs\r\n                })\r\n            }\r\n            worker.postMessage(`${graphs[index].cryptocurrency.value},${graphs[index].currency.value},${this.state.jwt}`);\r\n        }\r\n        else this.refreshSingle(index);\r\n    }\r\n\r\n    removeGraph = async (index) => {\r\n\t\tlet graphs = [...this.state.graphs];\r\n        graphs = graphs.filter((item, i) => i !== index);\r\n        let bkGraphs = [];\r\n        graphs.forEach(element => {\r\n            bkGraphs.push({\r\n                categories: element.chartOptions.xAxis.categories,\r\n                series: element.chartOptions.series,\r\n                graphId: element.id,\r\n                cryptocurrency: {\r\n                    value: element.cryptocurrency.value,\r\n                    name: element.cryptocurrency.name\r\n                },\r\n                currency: {\r\n                    value: element.currency.value,\r\n                    name: element.currency.name\r\n                },\r\n                date: new Date,\r\n                image: element.image\r\n            })\r\n        });\r\n        const graph = {\r\n            userId: this.state.user._id,\r\n            graphs: bkGraphs\r\n        }\r\n        await crypto.replaceGraphs(graph);\r\n\t\tthis.setState({ graphs });\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <div className=\"w-50 mx-auto text-center pt-5\">\r\n\t\t\t\t\t<img src={cryptoImg} />\r\n\t\t\t\t\t<h1 style={{fontFamily: \"Courier New\"}}><strong>Saved Data</strong></h1>\r\n\t\t\t\t\t<hr/>\r\n                    {this.state.loaded && <div className=\"col-md-12 mt-3\">\r\n                        <p><strong>Refresh</strong></p>\r\n                        <button className=\"btn btn-success\" onClick={this.refreshData}><i className=\"fas fa-sync\"/></button>\r\n                    </div>}\r\n                </div>\r\n                {this.state.loaded ?\r\n                    <div className=\"text-center\">\r\n                        {this.state.graphs.length > 0 ?\r\n                            this.state.graphs.map((item, index) =>\r\n                                <div key={item.graphId} className=\"pt-3\">\r\n                                    <hr/>\r\n                                    <img src={item.image} />\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"col-md-9 text-center\">\r\n                                            {!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true} /> : <img src={loading} />}\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <div className=\"pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" value={item.cryptocurrency.name} className=\"form-control text-center\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-2\">\r\n                                                <input type=\"text\" value={item.currency.name} className=\"form-control text-center\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12 mt-3\">\r\n                                                        <p><strong>Compare with current data</strong></p>\r\n                                                        <input type=\"checkbox\" onChange={(e) => this.compare(e, index)} className=\"form-control\" />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-12 mt-3\">\r\n                                                        <p><strong>Delete</strong></p>\r\n                                                        <button className=\"btn btn-danger\" onClick={() => this.removeGraph(index)}><i className=\"fas fa-minus\"/></button>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6 mt-3\">\r\n                                                        <p><strong>Replace</strong></p>\r\n                                                        <button className=\"btn btn-warning\" onClick={() => this.removeGraph(index)}><i className=\"fas fa-exchange-alt\"/></button>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6 mt-3\">\r\n                                                        <p><strong>Save</strong></p>\r\n                                                        <button className=\"btn btn-primary\" onClick={() => this.removeGraph(index)}><i className=\"fas fa-save\"/></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            ) : \"\"}\r\n                    </div>\r\n\t\t\t\t: <div className=\"w-50 mx-auto text-center\" style={{paddingTop: \"30vh\"}}><img src={loading} /></div>}\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}