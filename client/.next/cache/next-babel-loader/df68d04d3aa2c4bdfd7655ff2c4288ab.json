{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\WEB\\\\crypto\\\\client\\\\pages\\\\customdata.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nexport default class CustomData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      data: [],\n      graphs: [],\n      options: {}\n    });\n\n    _defineProperty(this, \"addGraph\", () => {\n      const graphs = [...this.state.graphs];\n      graphs.push({\n        id: 1,\n        data: {\n          name: \"Bitcoin\"\n        }\n      });\n      this.setState({\n        graphs\n      });\n    });\n\n    _defineProperty(this, \"onClick\", async () => {\n      await crypto.getCurrencies().then(res => {\n        this.setState({\n          data: res.data,\n          options: {\n            title: {\n              text: 'BTC to EUR exchange rate over time'\n            },\n            subtitle: {\n              text: 'Click and drag in the plot area to zoom in'\n            },\n            xAxis: {\n              type: 'datetime'\n            },\n            yAxis: {\n              title: {\n                text: 'Exchange rate'\n              }\n            },\n            plotOptions: {\n              area: {\n                fillColor: {}\n              }\n            },\n            series: [{\n              type: \"area\",\n              name: \"BTC to EUR\",\n              data: res.data\n            }]\n          }\n        });\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    this.setState({\n      user\n    });\n    const options = {\n      chart: {\n        zoomType: 'x'\n      },\n      title: {\n        text: 'BTC to EUR exchange rate over time'\n      },\n      subtitle: {\n        text: 'Click and drag in the plot area to zoom in'\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: 'Exchange rate'\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      plotOptions: {\n        area: {\n          fillColor: {\n            linearGradient: {\n              x1: 0,\n              y1: 0,\n              x2: 0,\n              y2: 1\n            }\n          },\n          marker: {\n            radius: 2\n          },\n          lineWidth: 1,\n          states: {\n            hover: {\n              lineWidth: 1\n            }\n          },\n          threshold: null\n        }\n      }\n    };\n    await crypto.getCurrencies().then(res => {\n      this.setState({\n        data: res.data,\n        options: {\n          title: {\n            text: 'BTC to EUR exchange rate over time'\n          },\n          subtitle: {\n            text: 'Click and drag in the plot area to zoom in'\n          },\n          xAxis: {\n            type: 'datetime'\n          },\n          yAxis: {\n            title: {\n              text: 'Exchange rate'\n            }\n          },\n          plotOptions: {\n            area: {\n              fillColor: {}\n            }\n          },\n          series: [{\n            type: \"area\",\n            name: \"BTC to EUR\",\n            data: [1, 2, 3]\n          }]\n        }\n      });\n    }); //options.series[0].data = this.state.data;\n\n    console.log(this.state.options);\n    console.log(this.state.data);\n  }\n\n  render() {\n    //const select = <select>{this.state.data.data.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Hello \", this.state.user.name), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"+\"), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"R\"), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.state.graphs.length > 0 ? this.state.graphs.map(item => __jsx(HighchartsReact, {\n      key: item.id,\n      highcharts: Highcharts,\n      options: this.state.options,\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })) : \"\"));\n  }\n\n}","map":{"version":3,"sources":["D:/WEB/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","CustomData","user","data","graphs","options","state","push","id","name","setState","getCurrencies","then","res","title","text","subtitle","xAxis","type","yAxis","plotOptions","area","fillColor","series","componentDidMount","getCurrentUser","chart","zoomType","legend","enabled","linearGradient","x1","y1","x2","y2","marker","radius","lineWidth","states","hover","threshold","console","log","render","addGraph","onClick","length","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nexport default class CustomData extends Component {\r\n  state = {\r\n    user: {},\r\n    data: [],\r\n    graphs: [],\r\n    options: {}\r\n  }\r\n  \r\n  async componentDidMount() {\r\n\tconst user = auth.getCurrentUser();\r\n    this.setState({user});\r\n    const options = {\r\n      chart: {zoomType: 'x' },\r\n      title: {text: 'BTC to EUR exchange rate over time'},\r\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\r\n      xAxis: { type: 'datetime'},\r\n      yAxis: {\r\n          title: {text: 'Exchange rate'}\r\n      },\r\n      legend: {enabled: false},\r\n      plotOptions: {\r\n          area: {\r\n              fillColor: {\r\n                  linearGradient: {\r\n                      x1: 0,\r\n                      y1: 0,\r\n                      x2: 0,\r\n                      y2: 1\r\n                  },\r\n              },\r\n              marker: {radius: 2},\r\n              lineWidth: 1,\r\n              states: {\r\n                  hover: {lineWidth: 1}\r\n              },\r\n              threshold: null\r\n          }\r\n      }\r\n    }\r\n    await crypto.getCurrencies().then(res => {\r\n      this.setState({\r\n        data: res.data,\r\n        options: {\r\n          title: {text: 'BTC to EUR exchange rate over time'},\r\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\r\n      xAxis: { type: 'datetime'},\r\n      yAxis: {\r\n          title: {text: 'Exchange rate'}\r\n      },\r\n      plotOptions: {\r\n        area: {\r\n              fillColor: {\r\n              },\r\n          }\r\n      },\r\n          series: [{\r\n            type: \"area\",\r\n            name: \"BTC to EUR\",\r\n            data: [1,2,3]\r\n          }]\r\n        }})\r\n    });\r\n    //options.series[0].data = this.state.data;\r\n    console.log(this.state.options);    console.log(this.state.data);\r\n  }\r\n\r\n  addGraph = () => {\r\n      const graphs = [...this.state.graphs];\r\n      graphs.push({\r\n          id: 1,\r\n          data: {\r\n              name: \"Bitcoin\"\r\n          }\r\n      })\r\n      this.setState({graphs});\r\n  }\r\n\r\n  onClick = async () => {\r\n    await crypto.getCurrencies().then(res => {\r\n      this.setState({\r\n        data: res.data,\r\n        options: {\r\n          title: {text: 'BTC to EUR exchange rate over time'},\r\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\r\n      xAxis: { type: 'datetime'},\r\n      yAxis: {\r\n          title: {text: 'Exchange rate'}\r\n      },\r\n      plotOptions: {\r\n        area: {\r\n              fillColor: {\r\n              },\r\n          }\r\n      },\r\n          series: [{\r\n            type: \"area\",\r\n            name: \"BTC to EUR\",\r\n            data: res.data\r\n          }]\r\n        }})\r\n    });\r\n  }\r\n\r\n  render() {\r\n    //const select = <select>{this.state.data.data.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n\r\n    return (\r\n      <Layout>\r\n          <p>Hello {this.state.user.name}</p>\r\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\r\n          <button className=\"btn btn-primary\" onClick={this.onClick}>R</button>\r\n          <div className=\"row\">\r\n            {this.state.graphs.length > 0 ? \r\n              this.state.graphs.map(item => <HighchartsReact key={item.id} highcharts={Highcharts} options={this.state.options} oneToOne={true}/>): \"\"}\r\n            {/* {this.state.graphs.length > 0 ? \r\n                this.state.graphs.map(item => \r\n                    <div className=\"col-md-6\" key={item.id}>\r\n                        {select}\r\n                        <p>{item.data.name}</p>\r\n                        <HighchartsReact highcharts={Highcharts} options={this.state.options}/>\r\n                    </div> \r\n            ): \"\"} */}\r\n          </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}