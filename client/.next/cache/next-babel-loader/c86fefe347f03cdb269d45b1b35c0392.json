{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/laurentiu/Documents/crypto/client/pages/customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x',\n    backgroundColor: \"#eeeeee\"\n  },\n  title: {\n    text: 'BTC to EUR exchange rate over time'\n  },\n  subtitle: {\n    text: 'Click and drag in the plot area to zoom in'\n  },\n  xAxis: {\n    type: 'datetime'\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class CustomData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      data: [],\n      graphs: [],\n      cryptocurrencies: [{\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      }, {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }],\n      currencies: [{\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"BTC\"\n      }, {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }],\n      selectedCryptocurrency: \"\",\n      selectedCurrency: \"\",\n      chartOptions: {}\n    });\n\n    _defineProperty(this, \"addGraph\", () => {\n      const graphs = [...this.state.graphs];\n      graphs.push({\n        id: 1,\n        data: {\n          name: \"Bitcoin\"\n        }\n      });\n      this.setState({\n        graphs\n      });\n    });\n\n    _defineProperty(this, \"changeCryptocurrency\", e => {\n      this.setState({\n        [`selected${e.target.name}`]: e.target.value\n      });\n      console.log(this.state);\n    });\n  }\n\n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    this.setState({\n      user\n    });\n    const jwt = auth.getJwt();\n    const myWorker = new Worker(\"static/service-worker.js\");\n\n    myWorker.onmessage = e => {\n      console.log(e.data);\n\n      const bkOptions = _objectSpread({}, chartOptions);\n\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: e.data\n      }];\n      this.setState({\n        data: e.data,\n        chartOptions: bkOptions\n      });\n    };\n\n    myWorker.postMessage(`bitcoin,eur,${jwt}`);\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n       const bkOptions = {...this.state.chartOptions};\n       bkOptions.series = [{\n         type: \"area\",\n         name: \"BTC to EUR\",\n         data: res.data\n       }]\n       this.setState({\n         data: res.data,\n         chartOptions: bkOptions\n         })\n     }); */\n    //console.log(this.state.data);\n  }\n\n  render() {\n    const selectCC = __jsx(\"select\", {\n      name: \"cryptocurrency\",\n      onChange: this.changeCryptocurrency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Select Cryptocurrency\"), this.state.cryptocurrencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)));\n\n    const selectC = __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: this.changeCryptocurrency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Select Currency\"), this.state.currencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)));\n\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Hello \", this.state.user.name), selectCC, selectC, __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"+\"), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, this.state.graphs.length > 0 ? this.state.graphs.map(item => __jsx(\"div\", {\n      className: \"col-md-6\",\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, selectCC, selectC, __jsx(HighchartsReact, {\n      key: item.id,\n      highcharts: Highcharts,\n      options: this.state.chartOptions,\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))) : \"\"));\n  }\n\n}","map":{"version":3,"sources":["/home/laurentiu/Documents/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","chartOptions","chart","zoomType","backgroundColor","title","text","subtitle","xAxis","type","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","data","graphs","cryptocurrencies","id","name","symbol","currencies","selectedCryptocurrency","selectedCurrency","state","push","setState","e","target","value","console","log","componentDidMount","getCurrentUser","jwt","getJwt","myWorker","Worker","onmessage","bkOptions","series","postMessage","render","selectCC","changeCryptocurrency","map","item","selectC","addGraph","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nconst chartOptions = {\n  chart: {zoomType: 'x' , backgroundColor: \"#eeeeee\"},\n      title: {text: 'BTC to EUR exchange rate over time'},\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\n      xAxis: { type: 'datetime'},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {\n                  hover: {lineWidth: 1}\n              },\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    data: [],\n    graphs: [],\n    cryptocurrencies: [\n      {\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      },\n      {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }\n    ],\n    currencies : [\n      {\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"BTC\"\n      },\n      {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }\n    ],\n    selectedCryptocurrency: \"\",\n    selectedCurrency: \"\",\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n\t  const user = auth.getCurrentUser();\n    this.setState({user});\n    const jwt = auth.getJwt();\n    const myWorker = new Worker(\"static/service-worker.js\");\n    myWorker.onmessage = e => {\n      console.log(e.data);\n      const bkOptions = {...chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: e.data\n      }]\n      this.setState({\n        data: e.data,\n        chartOptions: bkOptions\n        })\n    }\n    myWorker.postMessage(`bitcoin,eur,${jwt}`);\n   /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n    //console.log(this.state.data);\n  }\n\n  addGraph = () => {\n\n      const graphs = [...this.state.graphs];\n      graphs.push({\n          id: 1,\n          data: {\n              name: \"Bitcoin\"\n          }\n      })\n      this.setState({graphs});\n  }\n\n  changeCryptocurrency = (e) => {\n    this.setState({[`selected${e.target.name}`]:e.target.value});\n    console.log(this.state);\n  }\n\n  render() {\n    const selectCC = <select name=\"cryptocurrency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    const selectC = <select name=\"Currency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          {selectCC}\n          {selectC}\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <div className=\"row\">\n            {this.state.graphs.length > 0 ? \n                this.state.graphs.map(item => \n                    <div className=\"col-md-6\" key={item.id}>\n                        {selectCC}\n                        {selectC}\n                        <HighchartsReact key={item.id} highcharts={Highcharts} options={this.state.chartOptions} oneToOne={true}/>\n                    </div> \n            ): \"\"}\n          </div>\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}