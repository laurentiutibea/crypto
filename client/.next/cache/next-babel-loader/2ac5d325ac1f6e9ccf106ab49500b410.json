{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/laurentiu/Documents/crypto/client/pages/customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts'; // import HighchartsReact from 'highcharts-react-official';\n\nimport ReactHighcharts from 'react-highcharts';\nimport update from \"react-addons-update\";\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nimport loading from \"../src/91.gif\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x'\n  },\n  xAxis: {\n    type: 'datetime',\n    dateTimeLabelFormats: {\n      day: '%d-%m-%Y - %h:%m'\n    },\n    title: {\n      text: 'Date'\n    }\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class CustomData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: [],\n      graphs: [],\n      cryptocurrencies: [],\n      currencies: [],\n      selectedCryptocurrency: {},\n      selectedCurrency: {},\n      workers: 0,\n      loading: false,\n      loaded: false,\n      interval: [],\n      chartOptions: {}\n    });\n\n    _defineProperty(this, \"addGraph\", () => {\n      const worker = new Worker(\"static/service-worker.js\");\n\n      const bkOptions = _objectSpread({}, chartOptions);\n\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        console.log(e.data);\n        bkOptions.title = {\n          text: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name} exchange rate over time`\n        }, bkOptions.series = [{\n          type: \"line\",\n          name: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name}`,\n          data: e.data.prices\n        }];\n        bkOptions.xAxis.categories = [...e.data.time];\n        graphs.push({\n          id: _Date$now(),\n          chartOptions: bkOptions,\n          cryptocurrency: this.state.selectedCryptocurrency.value,\n          currency: this.state.selectedCurrency.value,\n          live: false\n        });\n        console.log(graphs);\n        this.setState({\n          graphs: graphs,\n          workers: this.state.workers + 1,\n          interval: \"\"\n        });\n      };\n\n      worker.postMessage(`${this.state.selectedCryptocurrency.value},${this.state.selectedCurrency.value},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"changeCryptocurrency\", e => {\n      console.log(e.target);\n      /* const value = JSON.parse(e.target.value);\n      console.log(value);\n      this.setState({\n        [`selected${e.target.name}`]:{\n          value: value.id,\n          name: value.name\n        }\n      }); */\n    });\n\n    _defineProperty(this, \"refreshAll\", () => {\n      let workers = new Array(this.state.workers);\n      const graphs = [...this.state.graphs];\n      this.setState({\n        loading: true\n      });\n\n      for (let i = 0; i < this.state.workers; i++) {\n        workers[i] = new Worker(\"static/service-worker.js\");\n\n        workers[i].onmessage = e => {\n          graphs[i].chartOptions.xAxis.categories = [...e.data.time];\n          graphs[i].chartOptions.series = [{\n            type: \"line\",\n            name: this.state.graphs[i].chartOptions.series[0].name,\n            data: e.data.prices\n          }];\n          this.setState({\n            graphs: graphs,\n            loading: false\n          });\n        };\n\n        workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n      }\n    });\n\n    _defineProperty(this, \"refreshSingle\", index => {\n      const worker = new Worker(\"static/service-worker.js\");\n      const graphs = [...this.state.graphs];\n      this.setState({\n        loading: true\n      });\n\n      worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories = [...e.data.time];\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: e.data.prices\n        }];\n        this.setState({\n          graphs: graphs,\n          loading: false\n        });\n      };\n\n      worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"removeGraph\", index => {\n      let graphs = [...this.state.graphs];\n      clearInterval(graphs[index].interval);\n      graphs = graphs.filter((item, i) => i !== index);\n      this.setState({\n        graphs\n      });\n    });\n\n    _defineProperty(this, \"liveData\", index => {\n      console.log(\"LIVE\", index);\n      const worker = new Worker(\"static/service-worker.js\");\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories.push(e.data.currentTime);\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n        }];\n        this.setState({\n          graphs: update(this.state.graphs, {\n            [index]: {\n              $set: graphs[index]\n            }\n          })\n        });\n      };\n\n      worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"changeGraphLive\", (e, index) => {\n      const graphs = [...this.state.graphs];\n\n      if (e.target.checked) {\n        graphs[index].interval = setInterval(() => this.liveData(index), 4000);\n        this.setState({\n          graphs\n        });\n      } else {\n        clearInterval(graphs[index].interval);\n      }\n    });\n  }\n\n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    await crypto.getCryptocurrencies().then(res => {\n      console.log(res.data);\n      this.setState({\n        cryptocurrencies: res.data.cryptocurrencies,\n        currencies: res.data.currencies,\n        loaded: true\n      });\n    });\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Hello \", this.state.user.name), __jsx(\"div\", {\n      className: \"form-group w-25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: this.changeCryptocurrency,\n      disabled: !this.state.loaded,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Select Cryptocurrency\"), this.state.cryptocurrencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol))), __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: this.changeCryptocurrency,\n      disabled: !this.state.loaded,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Select Currency\"), this.state.currencies.map(item => __jsx(\"option\", {\n      value: item.d,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)))), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"+\"), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.refreshAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"REFRESH ALL\"), this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      className: \"row mt-4\",\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: this.changeGraphCryptocurrency,\n      defaultValue: item.cryptocurrency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.state.cryptocurrencies.map(i => __jsx(\"option\", {\n      value: i.id,\n      key: i.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, i.name, \" - \", i.symbol))), __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: this.changeGraphCryptocurrency,\n      defaultValue: item.currency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, this.state.currencies.map(i => __jsx(\"option\", {\n      value: i.id,\n      key: i.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, i.name, \" - \", i.symbol))), __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: e => this.changeGraphLive(e, index),\n      defaultValue: item.live,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.refreshSingle(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"REFRESH\"), __jsx(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: () => this.removeGraph(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"-\"))), __jsx(\"div\", {\n      className: \"col-md-9 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, !this.state.loading ? __jsx(ReactHighcharts, {\n      key: item.id,\n      highcharts: Highcharts,\n      config: item.chartOptions,\n      ref: \"chart\",\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }) : __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })))) : \"\");\n  }\n\n}","map":{"version":3,"sources":["/home/laurentiu/Documents/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","ReactHighcharts","update","auth","crypto","loading","chartOptions","chart","zoomType","xAxis","type","dateTimeLabelFormats","day","title","text","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","jwt","data","graphs","cryptocurrencies","currencies","selectedCryptocurrency","selectedCurrency","workers","loaded","interval","worker","Worker","bkOptions","state","onmessage","e","console","log","name","series","prices","categories","time","push","id","cryptocurrency","value","currency","live","setState","postMessage","target","Array","i","index","clearInterval","filter","item","currentTime","currentPrice","$set","checked","setInterval","liveData","componentDidMount","getCurrentUser","getJwt","getCryptocurrencies","then","res","render","changeCryptocurrency","map","symbol","d","addGraph","refreshAll","length","changeGraphCryptocurrency","changeGraphLive","refreshSingle","removeGraph"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\nimport ReactHighcharts from 'react-highcharts';\nimport update from \"react-addons-update\";\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nimport loading from \"../src/91.gif\";\n\n\nconst chartOptions = {\n  chart: {zoomType: 'x'},\n      xAxis: { \n\t\t  \ttype: 'datetime',\n\t\t  \tdateTimeLabelFormats: {day: '%d-%m-%Y - %h:%m'},\n        title: {text: 'Date'}\n\t\t},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {hover: {lineWidth: 1}},\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    jwt: \"\",\n    data: [],\n    graphs: [],\n    cryptocurrencies: [],\n    currencies : [],\n    selectedCryptocurrency: {},\n    selectedCurrency: {},\n    workers: 0,\n    loading: false,\n    loaded: false,\n\t  interval: [],\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({user,jwt});\n    await crypto.getCryptocurrencies().then(res => {\n      console.log(res.data);\n      this.setState({\n        cryptocurrencies: res.data.cryptocurrencies,\n        currencies: res.data.currencies,\n        loaded: true\n      })\n    });\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n  }\n\n  addGraph = () => {\n    const worker = new Worker(\"static/service-worker.js\");\n    const bkOptions = {...chartOptions};\n    const graphs = [...this.state.graphs];\n    worker.onmessage = e => {\n\t\tconsole.log(e.data);\n\t\tbkOptions.title =  {text: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name} exchange rate over time`},\n\t\tbkOptions.series = [{\n\t\t\ttype: \"line\",\n\t\t\tname: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name}`,\n\t\t\tdata: e.data.prices\n\t\t}]\n\t\tbkOptions.xAxis.categories = [...e.data.time];\n\t\tgraphs.push({\n\t\t\tid: Date.now(),\n\t\t\tchartOptions: bkOptions,\n\t\t\tcryptocurrency: this.state.selectedCryptocurrency.value,\n\t\t\tcurrency: this.state.selectedCurrency.value,\n\t\t\tlive: false\n    \t})\n      console.log(graphs);\n      this.setState({\n        graphs: graphs,\n        workers: this.state.workers+1,\n        interval: \"\"\n      })\n    }\n    worker.postMessage(`${this.state.selectedCryptocurrency.value},${this.state.selectedCurrency.value},${this.state.jwt}`);\n    \n  }\n\n  changeCryptocurrency = (e) => {\n    console.log(e.target);\n    /* const value = JSON.parse(e.target.value);\n    console.log(value);\n    this.setState({\n      [`selected${e.target.name}`]:{\n        value: value.id,\n        name: value.name\n      }\n    }); */\n  }\n\n  refreshAll = () => {\n\tlet workers = new Array(this.state.workers);\n\tconst graphs = [...this.state.graphs];\n\tthis.setState({loading: true});\n\tfor(let i=0; i<this.state.workers; i++){\n\tworkers[i] = new Worker(\"static/service-worker.js\");\n\tworkers[i].onmessage = e => {\n\t\tgraphs[i].chartOptions.xAxis.categories = [...e.data.time];\n\t\tgraphs[i].chartOptions.series = [{\n\t\ttype: \"line\",\n\t\tname: this.state.graphs[i].chartOptions.series[0].name,\n\t\tdata: e.data.prices\n\t\t}]\n\t\tthis.setState({\n\t\t\tgraphs: graphs,\n\t\t\tloading: false\n\t\t})\n\t}\n\tworkers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n\t}\n  }\n\n  refreshSingle = (index) => {\n    const worker = new Worker(\"static/service-worker.js\");\n    const graphs = [...this.state.graphs];\n    this.setState({loading: true});\n    worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories = [...e.data.time];\n        graphs[index].chartOptions.series = [{\n            type: \"line\",\n            name: this.state.graphs[index].chartOptions.series[0].name,\n            data: e.data.prices\n        }]\n        this.setState({\n          graphs: graphs,\n          loading: false\n        })\n      }\n    worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n  }\n\n  removeGraph = (index) => {\n    let graphs = [...this.state.graphs];\n    clearInterval(graphs[index].interval);\n    graphs = graphs.filter((item,i) => i !== index);\n    this.setState({graphs});\n  }\n\n  liveData = (index) => {\n    console.log(\"LIVE\",index);\n    const worker = new Worker(\"static/service-worker.js\");\n    const graphs = [...this.state.graphs];\n\t  worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories.push(e.data.currentTime);\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n\t\t}]\n        this.setState({\n          \tgraphs: update(this.state.graphs, {[index]: {$set: graphs[index]}})\n        })\n      }\n\t  worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n  }\n\n  changeGraphLive = (e,index) => {\n    const graphs = [...this.state.graphs];\n    if(e.target.checked){\n      graphs[index].interval = setInterval(() => this.liveData(index), 4000);\n      this.setState({graphs});\n    }\n    else{\n      clearInterval(graphs[index].interval);\n    }\n  }\n\n  render() {\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          <div className=\"form-group w-25\">\n            <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency} disabled={!this.state.loaded} className=\"form-control\"><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n            <select name=\"Currency\" onChange={this.changeCryptocurrency} disabled={!this.state.loaded} className=\"form-control\"><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.d} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n          </div>\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH ALL</button>\n            {this.state.graphs.length > 0 ? \n\t\t\t\tthis.state.graphs.map((item,index) => \n\t\t\t\t\t<div className=\"row mt-4\" key={item.id}>\n\t\t\t\t\t\t<div className=\"col-md-3\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<select name=\"Cryptocurrency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.cryptocurrency} className=\"form-control\">{this.state.cryptocurrencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\n\t\t\t\t\t\t\t\t<select name=\"Currency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.currency} className=\"form-control\">{this.state.currencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={(e) => this.changeGraphLive(e,index)} defaultValue={item.live} className=\"form-control\"/>\n\t\t\t\t\t\t\t\t<button className=\"btn btn-success\" onClick={() => this.refreshSingle(index)}>REFRESH</button>\n\t\t\t\t\t\t\t\t<button className=\"btn btn-danger\" onClick={() => this.removeGraph(index)}>-</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-md-9 text-center\">\n\t\t\t\t\t\t\t{!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true}/> : <img src={loading}/>}\n\t\t\t\t\t\t</div> \n\t\t\t\t\t</div>\n            ): \"\"}\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}