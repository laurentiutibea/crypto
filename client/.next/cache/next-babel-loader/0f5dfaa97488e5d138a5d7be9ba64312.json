{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\WEB\\\\crypto\\\\client\\\\pages\\\\customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts'; // import HighchartsReact from 'highcharts-react-official';\n\nimport ReactHighcharts from 'react-highcharts';\nimport update from \"immutability-helper\";\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nimport loading from \"../src/91.gif\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x'\n  },\n  xAxis: {\n    type: 'datetime',\n    dateTimeLabelFormats: {\n      day: '%d-%m-%Y - %h:%m'\n    },\n    title: {\n      text: 'Date'\n    }\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class CustomData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: [],\n      graphs: [],\n      cryptocurrencies: [],\n      currencies: [],\n      selectedCryptocurrency: {},\n      selectedCurrency: {},\n      workers: 0,\n      loading: false,\n      loaded: false,\n      interval: [],\n      searchQuery: \"\",\n      searchQuery2: \"\",\n      chartOptions: {}\n    });\n\n    _defineProperty(this, \"addGraph\", () => {\n      const worker = new Worker(\"static/service-worker.js\");\n\n      const bkOptions = _objectSpread({}, chartOptions);\n\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        console.log(e.data);\n        bkOptions.title = {\n          text: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name} exchange rate over time`\n        }, bkOptions.series = [{\n          type: \"line\",\n          name: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name}`,\n          data: e.data.prices\n        }];\n        bkOptions.xAxis.categories = [...e.data.time];\n        graphs.push({\n          id: _Date$now(),\n          chartOptions: bkOptions,\n          cryptocurrency: this.state.selectedCryptocurrency.value,\n          currency: this.state.selectedCurrency.value,\n          live: false\n        });\n        console.log(graphs);\n        this.setState({\n          graphs: graphs,\n          workers: this.state.workers + 1,\n          interval: \"\"\n        });\n      };\n\n      worker.postMessage(`${this.state.selectedCryptocurrency.value},${this.state.selectedCurrency.value},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"findName\", (array, value) => {\n      for (let i = 0; i < this.state[array].length; i++) {\n        if (this.state[array][i].id === value) {\n          return this.state[array][i].name;\n        }\n      }\n    });\n\n    _defineProperty(this, \"changeCryptocurrency\", (e, array) => {\n      console.log(e.target.value);\n      const name = this.findName(array, e.target.value);\n      console.log(name);\n      this.setState({\n        [`selected${e.target.name}`]: {\n          value: e.target.value,\n          name: name\n        }\n      });\n    });\n\n    _defineProperty(this, \"changeGraphCryptocurrency\", (e, index) => {\n      console.log(e.target.value, index);\n      const graphs = [...this.state.graphs];\n      graphs[index][e.target.name.toLowerCase()] = e.target.value;\n      this.setState({\n        graphs: graphs\n      });\n    });\n\n    _defineProperty(this, \"refreshAll\", () => {\n      let workers = new Array(this.state.workers);\n      const graphs = [...this.state.graphs];\n      this.setState({\n        loading: true\n      });\n\n      for (let i = 0; i < this.state.workers; i++) {\n        workers[i] = new Worker(\"static/service-worker.js\");\n\n        workers[i].onmessage = e => {\n          graphs[i].chartOptions.xAxis.categories = [...e.data.time];\n          graphs[i].chartOptions.series = [{\n            type: \"line\",\n            name: this.state.graphs[i].chartOptions.series[0].name,\n            data: e.data.prices\n          }];\n          this.setState({\n            graphs: graphs,\n            loading: false\n          });\n        };\n\n        workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n      }\n    });\n\n    _defineProperty(this, \"refreshSingle\", index => {\n      const worker = new Worker(\"static/service-worker.js\");\n      const graphs = [...this.state.graphs]; //this.setState({loading: true});\n\n      worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories = [...e.data.time];\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: e.data.prices\n        }];\n        this.setState({\n          graphs: graphs //loading: false\n\n        });\n      };\n\n      worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"removeGraph\", index => {\n      let graphs = [...this.state.graphs];\n      clearInterval(graphs[index].interval);\n      graphs = graphs.filter((item, i) => i !== index);\n      this.setState({\n        graphs\n      });\n    });\n\n    _defineProperty(this, \"liveData\", index => {\n      console.log(\"LIVE\", index);\n      const worker = new Worker(\"static/service-worker.js\");\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        graphs[index].chartOptions.xAxis.categories.push(e.data.currentTime);\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\n        graphs[index].chartOptions.series = [{\n          type: \"line\",\n          name: this.state.graphs[index].chartOptions.series[0].name,\n          data: graphs[index].chartOptions.series[0].data\n        }];\n        this.setState({\n          graphs: update(this.state.graphs, {\n            [index]: {\n              $set: graphs[index]\n            }\n          })\n        });\n      };\n\n      worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"changeGraphLive\", (e, index) => {\n      const graphs = [...this.state.graphs];\n\n      if (e.target.checked) {\n        graphs[index].interval = setInterval(() => this.liveData(index), 4000);\n        this.setState({\n          graphs\n        });\n      } else {\n        clearInterval(graphs[index].interval);\n      }\n    });\n\n    _defineProperty(this, \"saveGraph\", async index => {\n      const bkGraph = _objectSpread({}, this.state.graphs[index]);\n\n      const graph = {\n        categories: bkGraph.chartOptions.xAxis.categories,\n        series: bkGraph.chartOptions.series[0],\n        graphId: bkGraph.id,\n        cryptocurrency: bkGraph.cryptocurrency,\n        currency: bkGraph.currency,\n        date: new Date()\n      };\n      console.log(graph);\n      await crypto.saveGraph(graph).then(res => {\n        console.log(\"SUCCESS!\");\n      }).catch(err => console.log(\"ERROR!\", err));\n    });\n  }\n\n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    await crypto.getCryptocurrencies().then(res => {\n      console.log(res.data);\n      this.setState({\n        cryptocurrencies: res.data.cryptocurrencies,\n        currencies: res.data.currencies,\n        loaded: true\n      });\n    });\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\r\n      const bkOptions = {...this.state.chartOptions};\r\n      bkOptions.series = [{\r\n        type: \"area\",\r\n        name: \"BTC to EUR\",\r\n        data: res.data\r\n      }]\r\n      this.setState({\r\n        data: res.data,\r\n        chartOptions: bkOptions\r\n        })\r\n    }); */\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Hello \", this.state.user.name), __jsx(\"div\", {\n      className: \"form-group w-25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: e => this.changeCryptocurrency(e, \"cryptocurrencies\"),\n      disabled: !this.state.loaded,\n      className: \"form-control\",\n      placeholder: \"Select Cryptocurrency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, this.state.cryptocurrencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol))), __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: e => this.changeCryptocurrency(e, \"currencies\"),\n      disabled: !this.state.loaded,\n      className: \"form-control\",\n      placeholder: \"Select Currency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, this.state.currencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)))), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"ADD\"), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.refreshAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"REFRESH ALL\"), this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      className: \"row mt-4\",\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: e => this.changeGraphCryptocurrency(e, index),\n      defaultValue: item.cryptocurrency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, this.state.cryptocurrencies.map(i => __jsx(\"option\", {\n      value: i.id,\n      key: i.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, i.name, \" - \", i.symbol))), __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: e => this.changeGraphCryptocurrency(e, index),\n      defaultValue: item.currency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, this.state.currencies.map(i => __jsx(\"option\", {\n      value: i.id,\n      key: i.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, i.name, \" - \", i.symbol))), __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: e => this.changeGraphLive(e, index),\n      defaultValue: item.live,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.refreshSingle(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"REFRESH\"), __jsx(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => this.refreshSingle(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"SEARCH\"), __jsx(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: () => this.removeGraph(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"DELETE\"), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => this.saveGraph(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"SAVE\"))), __jsx(\"div\", {\n      className: \"col-md-9 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, !this.state.loading ? __jsx(ReactHighcharts, {\n      key: item.id,\n      highcharts: Highcharts,\n      config: item.chartOptions,\n      ref: \"chart\",\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }) : __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })))) : \"\");\n  }\n\n}","map":{"version":3,"sources":["D:/WEB/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","ReactHighcharts","update","auth","crypto","loading","chartOptions","chart","zoomType","xAxis","type","dateTimeLabelFormats","day","title","text","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","jwt","data","graphs","cryptocurrencies","currencies","selectedCryptocurrency","selectedCurrency","workers","loaded","interval","searchQuery","searchQuery2","worker","Worker","bkOptions","state","onmessage","e","console","log","name","series","prices","categories","time","push","id","cryptocurrency","value","currency","live","setState","postMessage","array","i","length","target","findName","index","toLowerCase","Array","clearInterval","filter","item","currentTime","currentPrice","$set","checked","setInterval","liveData","bkGraph","graph","graphId","date","Date","saveGraph","then","res","catch","err","componentDidMount","getCurrentUser","getJwt","getCryptocurrencies","render","changeCryptocurrency","map","symbol","addGraph","refreshAll","changeGraphCryptocurrency","changeGraphLive","refreshSingle","removeGraph"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\n// import HighchartsReact from 'highcharts-react-official';\r\nimport ReactHighcharts from 'react-highcharts';\r\nimport update from \"immutability-helper\";\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nimport loading from \"../src/91.gif\";\r\n\r\n\r\nconst chartOptions = {\r\n  chart: {zoomType: 'x'},\r\n      xAxis: { \r\n\t\t  \ttype: 'datetime',\r\n\t\t  \tdateTimeLabelFormats: {day: '%d-%m-%Y - %h:%m'},\r\n        title: {text: 'Date'}\r\n\t\t},\r\n      yAxis: {\r\n          title: {text: 'Exchange rate'}\r\n      },\r\n      legend: {enabled: false},\r\n      plotOptions: {\r\n          area: {\r\n              fillColor: {\r\n                  linearGradient: {\r\n                      x1: 0,\r\n                      y1: 0,\r\n                      x2: 0,\r\n                      y2: 1\r\n                  },\r\n                  stops: [\r\n                    [0, \"#7cb5ec\"],\r\n                    [0.5, \"#7cb5ec80\"],\r\n                    [0.9, \"#7cb5ff33\"]\r\n                ]\r\n              },\r\n              marker: {radius: 2},\r\n              lineWidth: 1,\r\n              states: {hover: {lineWidth: 1}},\r\n              threshold: null\r\n          }\r\n      }\r\n    }\r\n\r\nexport default class CustomData extends Component {\r\n  state = {\r\n    user: {},\r\n    jwt: \"\",\r\n    data: [],\r\n    graphs: [],\r\n    cryptocurrencies: [],\r\n    currencies : [],\r\n    selectedCryptocurrency: {},\r\n    selectedCurrency: {},\r\n    workers: 0,\r\n    loading: false,\r\n    loaded: false,\r\n    interval: [],\r\n    searchQuery: \"\",\r\n    searchQuery2: \"\",\r\n    chartOptions: {}\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    const user = auth.getCurrentUser();\r\n    const jwt = auth.getJwt();\r\n    this.setState({user,jwt});\r\n    await crypto.getCryptocurrencies().then(res => {\r\n      console.log(res.data);\r\n      this.setState({\r\n        cryptocurrencies: res.data.cryptocurrencies,\r\n        currencies: res.data.currencies,\r\n        loaded: true\r\n      })\r\n    });\r\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\r\n      const bkOptions = {...this.state.chartOptions};\r\n      bkOptions.series = [{\r\n        type: \"area\",\r\n        name: \"BTC to EUR\",\r\n        data: res.data\r\n      }]\r\n      this.setState({\r\n        data: res.data,\r\n        chartOptions: bkOptions\r\n        })\r\n    }); */\r\n  }\r\n\r\n  addGraph = () => {\r\n    const worker = new Worker(\"static/service-worker.js\");\r\n    const bkOptions = {...chartOptions};\r\n    const graphs = [...this.state.graphs];\r\n    worker.onmessage = e => {\r\n\t\tconsole.log(e.data);\r\n\t\tbkOptions.title =  {text: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name} exchange rate over time`},\r\n\t\tbkOptions.series = [{\r\n\t\t\ttype: \"line\",\r\n\t\t\tname: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name}`,\r\n\t\t\tdata: e.data.prices\r\n\t\t}]\r\n\t\tbkOptions.xAxis.categories = [...e.data.time];\r\n\t\tgraphs.push({\r\n\t\t\tid: Date.now(),\r\n\t\t\tchartOptions: bkOptions,\r\n\t\t\tcryptocurrency: this.state.selectedCryptocurrency.value,\r\n\t\t\tcurrency: this.state.selectedCurrency.value,\r\n\t\t\tlive: false\r\n    \t})\r\n      console.log(graphs);\r\n      this.setState({\r\n        graphs: graphs,\r\n        workers: this.state.workers+1,\r\n        interval: \"\"\r\n      })\r\n    }\r\n    worker.postMessage(`${this.state.selectedCryptocurrency.value},${this.state.selectedCurrency.value},${this.state.jwt}`);\r\n    \r\n  }\r\n\r\n  findName = (array,value) => {\r\n    for(let i=0; i<this.state[array].length; i++){\r\n      if(this.state[array][i].id === value){\r\n        return this.state[array][i].name;\r\n      }\r\n    }\r\n  }\r\n\r\n  changeCryptocurrency = (e,array) => {\r\n    console.log(e.target.value);\r\n    const name = this.findName(array,e.target.value);\r\n    console.log(name);\r\n    this.setState({\r\n      [`selected${e.target.name}`]:{\r\n        value: e.target.value,\r\n        name: name\r\n      }\r\n    });\r\n  }\r\n\r\n  changeGraphCryptocurrency = (e,index) => {\r\n    console.log(e.target.value, index);\r\n    const graphs = [...this.state.graphs];\r\n    graphs[index][e.target.name.toLowerCase()] = e.target.value;\r\n    this.setState({graphs: graphs})\r\n  }\r\n\r\n  refreshAll = () => {\r\n\tlet workers = new Array(this.state.workers);\r\n\tconst graphs = [...this.state.graphs];\r\n\tthis.setState({loading: true});\r\n\tfor(let i=0; i<this.state.workers; i++){\r\n\tworkers[i] = new Worker(\"static/service-worker.js\");\r\n\tworkers[i].onmessage = e => {\r\n\t\tgraphs[i].chartOptions.xAxis.categories = [...e.data.time];\r\n\t\tgraphs[i].chartOptions.series = [{\r\n\t\ttype: \"line\",\r\n\t\tname: this.state.graphs[i].chartOptions.series[0].name,\r\n\t\tdata: e.data.prices\r\n\t\t}]\r\n\t\tthis.setState({\r\n\t\t\tgraphs: graphs,\r\n\t\t\tloading: false\r\n\t\t})\r\n\t}\r\n\tworkers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\r\n\t}\r\n  }\r\n\r\n  refreshSingle = (index) => {\r\n    const worker = new Worker(\"static/service-worker.js\");\r\n    const graphs = [...this.state.graphs];\r\n    //this.setState({loading: true});\r\n    worker.onmessage = e => {\r\n        graphs[index].chartOptions.xAxis.categories = [...e.data.time];\r\n        graphs[index].chartOptions.series = [{\r\n            type: \"line\",\r\n            name: this.state.graphs[index].chartOptions.series[0].name,\r\n            data: e.data.prices\r\n        }]\r\n        this.setState({\r\n          graphs: graphs,\r\n          //loading: false\r\n        })\r\n      }\r\n    worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\r\n  }\r\n\r\n  removeGraph = (index) => {\r\n    let graphs = [...this.state.graphs];\r\n    clearInterval(graphs[index].interval);\r\n    graphs = graphs.filter((item,i) => i !== index);\r\n    this.setState({graphs});\r\n  }\r\n\r\n  liveData = (index) => {\r\n    console.log(\"LIVE\",index);\r\n    const worker = new Worker(\"static/service-worker.js\");\r\n    const graphs = [...this.state.graphs];\r\n\t  worker.onmessage = e => {\r\n        graphs[index].chartOptions.xAxis.categories.push(e.data.currentTime);\r\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\r\n        graphs[index].chartOptions.series = [{\r\n          type: \"line\",\r\n          name: this.state.graphs[index].chartOptions.series[0].name,\r\n          data: graphs[index].chartOptions.series[0].data\r\n\t\t}]\r\n        this.setState({\r\n          \tgraphs: update(this.state.graphs, {[index]: {$set: graphs[index]}})\r\n        })\r\n      }\r\n\t  worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\r\n  }\r\n\r\n  changeGraphLive = (e,index) => {\r\n    const graphs = [...this.state.graphs];\r\n    if(e.target.checked){\r\n      graphs[index].interval = setInterval(() => this.liveData(index), 4000);\r\n      this.setState({graphs});\r\n    }\r\n    else{\r\n      clearInterval(graphs[index].interval);\r\n    }\r\n  }\r\n\r\n  saveGraph = async (index) => {\r\n    const bkGraph = {...this.state.graphs[index]};\r\n    const graph = {\r\n      categories: bkGraph.chartOptions.xAxis.categories,\r\n      series: bkGraph.chartOptions.series[0],\r\n      graphId: bkGraph.id,\r\n      cryptocurrency: bkGraph.cryptocurrency,\r\n      currency: bkGraph.currency,\r\n      date: new Date\r\n    }\r\n    console.log(graph);\r\n    await crypto.saveGraph(graph).then(res => {console.log(\"SUCCESS!\");}).catch(err => console.log(\"ERROR!\",err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n          <p>Hello {this.state.user.name}</p>\r\n          <div className=\"form-group w-25\">\r\n            <select name=\"Cryptocurrency\" onChange={(e) => this.changeCryptocurrency(e,\"cryptocurrencies\")} disabled={!this.state.loaded} className=\"form-control\" placeholder=\"Select Cryptocurrency\">{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n            <select name=\"Currency\" onChange={(e) => this.changeCryptocurrency(e,\"currencies\")} disabled={!this.state.loaded} className=\"form-control\" placeholder=\"Select Currency\">{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n          </div>\r\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>ADD</button>\r\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH ALL</button>\r\n            {this.state.graphs.length > 0 ? \r\n              this.state.graphs.map((item,index) => \r\n                <div className=\"row mt-4\" key={item.id}>\r\n                  <div className=\"col-md-3\">\r\n                    <div className=\"form-group\">\r\n                      <select name=\"Cryptocurrency\" onChange={(e) => this.changeGraphCryptocurrency(e,index)} defaultValue={item.cryptocurrency} className=\"form-control\">{this.state.cryptocurrencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\r\n                      <select name=\"Currency\" onChange={(e) => this.changeGraphCryptocurrency(e,index)} defaultValue={item.currency} className=\"form-control\">{this.state.currencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\r\n                      <input type=\"checkbox\" onChange={(e) => this.changeGraphLive(e,index)} defaultValue={item.live} className=\"form-control\"/>\r\n                      <button className=\"btn btn-success\" onClick={() => this.refreshSingle(index)}>REFRESH</button>\r\n                      <button className=\"btn btn-warning\" onClick={() => this.refreshSingle(index)}>SEARCH</button>\r\n                      <button className=\"btn btn-danger\" onClick={() => this.removeGraph(index)}>DELETE</button>\r\n                      <button className=\"btn btn-primary\" onClick={() => this.saveGraph(index)}>SAVE</button>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-9 text-center\">\r\n                    {!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true}/> : <img src={loading}/>}\r\n                  </div> \r\n                </div>\r\n            ): \"\"}\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}