{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\WEB\\\\crypto\\\\client\\\\pages\\\\saveddata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nimport loading from \"../src/91.gif\";\nimport cryptoImg from \"../src/crypto-text.png\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x'\n  },\n  xAxis: {\n    type: 'datetime',\n    dateTimeLabelFormats: {\n      day: '%d-%m-%Y - %h:%m'\n    },\n    title: {\n      text: 'Date'\n    }\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class SavedData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: {\n        graphs: []\n      },\n      loaded: false,\n      graphs: [],\n      loadArr: []\n    });\n\n    _defineProperty(this, \"refreshData\", async () => {\n      let graphs = [];\n      const loadArr = [...this.state.loadArr];\n      if (this.state.graphs.length === 0) graphs = [];else this.setState({\n        graphs: []\n      });\n      const {\n        data\n      } = await crypto.getSavedData(this.state.user._id);\n      this.setState({\n        loaded: false\n      });\n\n      for (let i = 0; i < data.graphs.length; i++) {\n        let bkOptions = _objectSpread({}, chartOptions);\n\n        bkOptions.title = {\n          text: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name} exchange rate over time`\n        };\n        bkOptions.series = [{\n          type: \"line\",\n          name: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name}`,\n          data: data.graphs[i].series.data\n        }];\n        bkOptions.xAxis.categories = data.graphs[i].categories;\n        graphs.push({\n          chartOptions: bkOptions,\n          cryptocurrency: {\n            name: data.graphs[i].cryptocurrency.name,\n            value: data.graphs[i].cryptocurrency.value\n          },\n          currency: {\n            name: data.graphs[i].currency.name,\n            value: data.graphs[i].currency.value\n          },\n          live: false,\n          image: data.graphs[i].image,\n          graphId: data.graphs[i].graphId,\n          date: data.graphs[i].date\n        });\n        loadArr.push(false);\n      }\n\n      this.setState({\n        data,\n        loaded: true,\n        graphs,\n        loadArr\n      });\n    });\n\n    _defineProperty(this, \"refreshSingle\", async index => {\n      const graphs = [...this.state.graphs];\n      const loadArr = [...this.state.loadArr];\n      loadArr[index] = true;\n      await this.setState({\n        loadArr\n      });\n      graphs[index].chartOptions.title = {\n        text: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency.name} exchange rate over time`\n      };\n      graphs[index].chartOptions.series = [{\n        type: \"line\",\n        name: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency.name}`,\n        data: graphs[index].chartOptions.series[0].data\n      }];\n      loadArr[index] = false;\n      this.setState({\n        graphs: graphs,\n        loadArr\n      });\n    });\n\n    _defineProperty(this, \"compare\", (e, index) => {\n      if (e.target.checked) {\n        const worker = new Worker(\"static/service-worker.js\");\n        const graphs = [...this.state.graphs];\n        const loadArr = [...this.state.loadArr];\n        loadArr[index] = true;\n        this.setState({\n          loadArr\n        });\n\n        worker.onmessage = e => {\n          graphs[index].chartOptions.series.push({\n            type: \"line\",\n            name: \"NEW:\" + this.state.graphs[index].chartOptions.series[0].name,\n            data: e.data.prices,\n            _colorIndex: 1\n          });\n          loadArr[index] = false;\n          this.setState({\n            graphs,\n            loadArr\n          });\n        };\n\n        worker.postMessage(`${graphs[index].cryptocurrency.value},${graphs[index].currency.value},${this.state.jwt}`);\n      } else this.refreshSingle(index);\n    });\n\n    _defineProperty(this, \"editGraph\", async (index, action) => {\n      let graphs = [...this.state.graphs];\n      if (action === \"remove\") graphs = graphs.filter((item, i) => i !== index);\n      let bkGraphs = [];\n      graphs.forEach((element, i) => {\n        bkGraphs.push({\n          categories: element.chartOptions.xAxis.categories,\n          series: action === \"save\" ? i === index ? element.chartOptions.series[1] : element.chartOptions.series[0] : element.chartOptions.series[0],\n          graphId: element.graphId,\n          cryptocurrency: {\n            value: element.cryptocurrency.value,\n            name: element.cryptocurrency.name\n          },\n          currency: {\n            value: element.currency.value,\n            name: element.currency.name\n          },\n          date: new Date(),\n          image: element.image\n        });\n      });\n      const graph = {\n        userId: this.state.user._id,\n        graphs: bkGraphs\n      };\n      console.log(bkGraphs);\n      await crypto.replaceGraphs(graph);\n      this.setState({\n        graphs\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const user = await auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    this.refreshData();\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"w-50 mx-auto text-center pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: cryptoImg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), __jsx(\"h1\", {\n      style: {\n        fontFamily: \"Courier New\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Saved Data\")), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), this.state.loaded && __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Refresh\")), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.refreshData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-sync\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })))), this.state.loaded ? __jsx(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      key: item.graphId,\n      className: \"pt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), __jsx(\"img\", {\n      src: item.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"row mt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-9 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, !this.state.loading && !this.state.loadArr[index] ? __jsx(HighchartsReact, {\n      key: item.id,\n      highcharts: Highcharts,\n      options: item.chartOptions,\n      allowChartUpdate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }) : __jsx(\"div\", {\n      className: \"mx-auto text-center\",\n      style: {\n        paddingTop: \"20%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: \"col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Cryptocurrency\"))), __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: item.cryptocurrency.name,\n      className: \"form-control text-center shadow\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"To\"))), __jsx(\"div\", {\n      className: \"pt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: item.currency.name,\n      className: \"form-control text-center shadow\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"col-md-12 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Compare with current data\")), __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: e => this.compare(e, index),\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    })), __jsx(\"div\", {\n      className: \"col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Delete\")), __jsx(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: () => this.editGraph(index, \"remove\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-minus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: \"col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, __jsx(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Save\")), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => this.editGraph(index, \"save\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fas fa-save\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }))))))))) : \"\") : __jsx(\"div\", {\n      className: \"w-50 mx-auto text-center\",\n      style: {\n        paddingTop: \"30vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:/WEB/crypto/client/pages/saveddata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","loading","cryptoImg","chartOptions","chart","zoomType","xAxis","type","dateTimeLabelFormats","day","title","text","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","SavedData","user","jwt","data","graphs","loaded","loadArr","state","length","setState","getSavedData","_id","i","bkOptions","cryptocurrency","name","currency","series","categories","push","value","live","image","graphId","date","index","e","target","checked","worker","Worker","onmessage","prices","_colorIndex","postMessage","refreshSingle","action","filter","item","bkGraphs","forEach","element","Date","graph","userId","console","log","replaceGraphs","componentDidMount","getCurrentUser","getJwt","refreshData","render","fontFamily","map","id","paddingTop","compare","editGraph"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nimport loading from \"../src/91.gif\";\r\nimport cryptoImg from \"../src/crypto-text.png\";\r\n\r\nconst chartOptions = {\r\n\tchart: { zoomType: 'x' },\r\n\txAxis: {\r\n\t\ttype: 'datetime',\r\n\t\tdateTimeLabelFormats: { day: '%d-%m-%Y - %h:%m' },\r\n\t\ttitle: { text: 'Date' }\r\n\t},\r\n\tyAxis: {\r\n\t\ttitle: { text: 'Exchange rate' }\r\n\t},\r\n\tlegend: { enabled: false },\r\n\tplotOptions: {\r\n\t\tarea: {\r\n\t\t\tfillColor: {\r\n\t\t\t\tlinearGradient: {\r\n\t\t\t\t\tx1: 0,\r\n\t\t\t\t\ty1: 0,\r\n\t\t\t\t\tx2: 0,\r\n\t\t\t\t\ty2: 1\r\n\t\t\t\t},\r\n\t\t\t\tstops: [\r\n\t\t\t\t\t[0, \"#7cb5ec\"],\r\n\t\t\t\t\t[0.5, \"#7cb5ec80\"],\r\n\t\t\t\t\t[0.9, \"#7cb5ff33\"]\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tmarker: { radius: 2 },\r\n\t\t\tlineWidth: 1,\r\n\t\t\tstates: { hover: { lineWidth: 1 } },\r\n\t\t\tthreshold: null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default class SavedData extends Component {\r\n    state = {\r\n        user: {},\r\n        jwt: \"\",\r\n        data: {\r\n            graphs: []\r\n        },\r\n        loaded: false,\r\n        graphs: [],\r\n        loadArr: []\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const user = await auth.getCurrentUser();\r\n        const jwt = auth.getJwt();\r\n        this.setState({ user, jwt });\r\n        this.refreshData();\r\n    }\r\n\r\n    refreshData = async () => {\r\n        let graphs = [];\r\n\t\tconst loadArr = [...this.state.loadArr];\r\n        if(this.state.graphs.length === 0) graphs = [];\r\n        else this.setState({graphs:[]});\r\n        const {data} = await crypto.getSavedData(this.state.user._id);\r\n        this.setState({loaded: false});\r\n        for(let i=0; i<data.graphs.length; i++){\r\n            let bkOptions = { ...chartOptions };\r\n            bkOptions.title = { text: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name} exchange rate over time` };\r\n            bkOptions.series = [{\r\n                type: \"line\",\r\n                name: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name}`,\r\n                data: data.graphs[i].series.data\r\n            }];\r\n\t\t\tbkOptions.xAxis.categories = data.graphs[i].categories;\r\n\t\t\tgraphs.push({\r\n\t\t\t\tchartOptions: bkOptions,\r\n\t\t\t\tcryptocurrency: {\r\n                    name: data.graphs[i].cryptocurrency.name,\r\n                    value: data.graphs[i].cryptocurrency.value\r\n                },\r\n\t\t\t\tcurrency: {\r\n                    name: data.graphs[i].currency.name,\r\n                    value: data.graphs[i].currency.value\r\n                },\r\n\t\t\t\tlive: false,\r\n                image: data.graphs[i].image,\r\n                graphId: data.graphs[i].graphId,\r\n                date: data.graphs[i].date\r\n            });\r\n\t\t\tloadArr.push(false);\r\n        }\r\n        this.setState({data, loaded: true, graphs, loadArr});\r\n    }\r\n\r\n    refreshSingle = async (index) => {\r\n        const graphs = [...this.state.graphs];\r\n        const loadArr = [...this.state.loadArr];\r\n\t\tloadArr[index] = true;\r\n\t\tawait this.setState({loadArr});\r\n        graphs[index].chartOptions.title = { text: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency.name} exchange rate over time` };\r\n        graphs[index].chartOptions.series = [{\r\n            type: \"line\",\r\n            name: `${graphs[index].cryptocurrency.name} to ${graphs[index].currency.name}`,\r\n            data: graphs[index].chartOptions.series[0].data\r\n        }];\r\n        loadArr[index] = false;\r\n        this.setState({\r\n            graphs: graphs,\r\n            loadArr\r\n        })\r\n    }\r\n\r\n    compare = (e,index) => {\r\n        if(e.target.checked){\r\n            const worker = new Worker(\"static/service-worker.js\");\r\n            const graphs = [...this.state.graphs];\r\n            const loadArr = [...this.state.loadArr];\r\n            loadArr[index] = true;\r\n            this.setState({loadArr});\r\n            worker.onmessage = e => {\r\n                graphs[index].chartOptions.series.push({\r\n                    type: \"line\",\r\n                    name: \"NEW:\"+this.state.graphs[index].chartOptions.series[0].name,\r\n                    data: e.data.prices,\r\n                    _colorIndex: 1\r\n                });\r\n                loadArr[index] = false;\r\n                this.setState({graphs, loadArr});\r\n            }\r\n            worker.postMessage(`${graphs[index].cryptocurrency.value},${graphs[index].currency.value},${this.state.jwt}`);\r\n        }\r\n        else this.refreshSingle(index);\r\n    }\r\n\r\n    editGraph = async (index, action) => {\r\n\t\tlet graphs = [...this.state.graphs];\r\n        if(action === \"remove\") graphs = graphs.filter((item, i) => i !== index);\r\n        let bkGraphs = [];\r\n        graphs.forEach((element, i) => {\r\n            bkGraphs.push({\r\n                categories: element.chartOptions.xAxis.categories,\r\n                series: action === \"save\" ? i === index ? element.chartOptions.series[1] : element.chartOptions.series[0] : element.chartOptions.series[0],\r\n                graphId: element.graphId,\r\n                cryptocurrency: {\r\n                    value: element.cryptocurrency.value,\r\n                    name: element.cryptocurrency.name\r\n                },\r\n                currency: {\r\n                    value: element.currency.value,\r\n                    name: element.currency.name\r\n                },\r\n                date: new Date,\r\n                image: element.image\r\n            })\r\n        });\r\n        const graph = {\r\n            userId: this.state.user._id,\r\n            graphs: bkGraphs\r\n        }\r\n        console.log(bkGraphs);\r\n        await crypto.replaceGraphs(graph);\r\n        this.setState({ graphs });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <div className=\"w-50 mx-auto text-center pt-5\">\r\n\t\t\t\t\t<img src={cryptoImg} />\r\n\t\t\t\t\t<h1 style={{fontFamily: \"Courier New\"}}><strong>Saved Data</strong></h1>\r\n\t\t\t\t\t<hr/>\r\n                    {this.state.loaded && <div className=\"col-md-12 mt-3\">\r\n                        <p><strong>Refresh</strong></p>\r\n                        <button className=\"btn btn-success\" onClick={this.refreshData}><i className=\"fas fa-sync\"/></button>\r\n                    </div>}\r\n                </div>\r\n                {this.state.loaded ?\r\n                    <div className=\"text-center\">\r\n                        {this.state.graphs.length > 0 ?\r\n                            this.state.graphs.map((item, index) =>\r\n                                <div key={item.graphId} className=\"pt-3\">\r\n                                    <hr/>\r\n                                    <img src={item.image} />\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"col-md-9 text-center\">\r\n                                            {!this.state.loading && !this.state.loadArr[index] ? <HighchartsReact key={item.id} highcharts={Highcharts} options={item.chartOptions} allowChartUpdate = {true}  /> : <div className=\"mx-auto text-center\" style={{paddingTop: \"20%\"}}><img src={loading} /></div>}\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <div className=\"pt-2\">\r\n                                                    <span><strong>Cryptocurrency</strong></span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n                                                <div className=\"pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" value={item.cryptocurrency.name} className=\"form-control text-center shadow\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n                                                <div className=\"pt-2\">\r\n                                                    <span><strong>To</strong></span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-2\">\r\n                                                    <input type=\"text\" value={item.currency.name} className=\"form-control text-center shadow\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12 mt-3\">\r\n                                                        <p><strong>Compare with current data</strong></p>\r\n                                                        <input type=\"checkbox\" onChange={(e) => this.compare(e, index)} className=\"form-control\" />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6 mt-3\">\r\n                                                        <p><strong>Delete</strong></p>\r\n                                                        <button className=\"btn btn-danger\" onClick={() => this.editGraph(index,\"remove\")}><i className=\"fas fa-minus\"/></button>\r\n                                                    </div>\r\n                                                    <div className=\"col-md-6 mt-3\">\r\n                                                        <p><strong>Save</strong></p>\r\n                                                        <button className=\"btn btn-primary\" onClick={() => this.editGraph(index,\"save\")}><i className=\"fas fa-save\"/></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            ) : \"\"}\r\n                    </div>\r\n\t\t\t\t: <div className=\"w-50 mx-auto text-center\" style={{paddingTop: \"30vh\"}}><img src={loading} /></div>}\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}