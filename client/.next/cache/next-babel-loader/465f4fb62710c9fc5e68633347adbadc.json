{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/laurentiu/Documents/crypto/client/pages/customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nvar chartOptions = {\n  chart: {\n    zoomType: 'x',\n    backgroundColor: \"#eeeeee\"\n  },\n  subtitle: {\n    text: 'Click and drag in the plot area to zoom in'\n  },\n  xAxis: {\n    type: 'datetime'\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\n\nvar CustomData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomData, _Component);\n\n  function CustomData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CustomData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      user: {},\n      jwt: \"\",\n      data: [],\n      graphs: [],\n      cryptocurrencies: [{\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      }, {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }],\n      currencies: [{\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      }, {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }],\n      selectedCryptocurrency: \"\",\n      selectedCurrency: \"\",\n      workers: 0,\n      chartOptions: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addGraph\", function () {\n      var worker = new Worker(\"static/service-worker.js\");\n\n      var bkOptions = _objectSpread({}, chartOptions);\n\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      worker.onmessage = function (e) {\n        bkOptions.title = {\n          text: \"\".concat(_this.state.selectedCryptocurrency, \" to \").concat(_this.state.selectedCurrency, \" exchange rate over time\")\n        }, bkOptions.series = [{\n          type: \"area\",\n          name: \"\".concat(_this.state.selectedCryptocurrency, \" to \").concat(_this.state.selectedCurrency),\n          data: e.data\n        }];\n        graphs.push({\n          id: _this.state.selectedCryptocurrency + _this.state.selectedCurrency,\n          chartOptions: bkOptions,\n          cryptocurrency: _this.state.selectedCryptocurrency,\n          currency: _this.state.selectedCurrency\n        });\n        console.log(graphs);\n\n        _this.setState({\n          data: e.data,\n          graphs: graphs,\n          workers: _this.state.workers + 1\n        });\n      };\n\n      worker.postMessage(\"\".concat(_this.state.selectedCryptocurrency, \",\").concat(_this.state.selectedCurrency, \",\").concat(_this.state.jwt));\n      /* const graphs = [...this.state.graphs];\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency\n      })\n      this.setState({graphs}); */\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeCryptocurrency\", function (e) {\n      console.log(e.target.value);\n\n      _this.setState(_defineProperty({}, \"selected\".concat(e.target.name), e.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"refreshAll\", function () {\n      var workers = new Array(_this.state.workers);\n\n      var graphs = _toConsumableArray(_this.state.graphs);\n\n      _this.setState({\n        loading: true\n      });\n\n      var _loop = function _loop(i) {\n        workers[i] = new Worker(\"static/service-worker.js\");\n\n        workers[i].onmessage = function (e) {\n          console.log(e.data);\n          graphs[i].chartOptions.series = [{\n            type: \"area\",\n            name: _this.state.graphs[i].chartOptions.series[0].name,\n            data: e.data\n          }];\n\n          _this.setState({\n            data: e.data,\n            graphs: graphs,\n            loading: false\n          });\n        };\n\n        setTimeout(function () {\n          return workers[i].postMessage(\"\".concat(graphs[i].cryptocurrency, \",\").concat(graphs[i].currency, \",\").concat(_this.state.jwt));\n        }, 5000);\n      };\n\n      for (var i = 0; i < _this.state.workers; i++) {\n        _loop(i);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CustomData, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var user, jwt;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                user = auth.getCurrentUser();\n                jwt = auth.getJwt();\n                this.setState({\n                  user: user,\n                  jwt: jwt\n                });\n                /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n                   const bkOptions = {...this.state.chartOptions};\n                   bkOptions.series = [{\n                     type: \"area\",\n                     name: \"BTC to EUR\",\n                     data: res.data\n                   }]\n                   this.setState({\n                     data: res.data,\n                     chartOptions: bkOptions\n                     })\n                 }); */\n                //console.log(this.state.data);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var selectCC = __jsx(\"select\", {\n        name: \"Cryptocurrency\",\n        onChange: this.changeCryptocurrency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, __jsx(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Select Cryptocurrency\"), this.state.cryptocurrencies.map(function (item) {\n        return __jsx(\"option\", {\n          value: item.id,\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, item.name, \" - \", item.symbol);\n      }));\n\n      var selectC = __jsx(\"select\", {\n        name: \"Currency\",\n        onChange: this.changeCryptocurrency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, __jsx(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Select Currency\"), this.state.currencies.map(function (item) {\n        return __jsx(\"option\", {\n          value: item.id,\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, item.name, \" - \", item.symbol);\n      }));\n\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Hello \", this.state.user.name), selectCC, selectC, __jsx(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.addGraph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"+\"), __jsx(\"button\", {\n        className: \"btn btn-success\",\n        onClick: this.refreshAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"REFRESH\"), __jsx(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, this.state.graphs.length > 0 ? this.state.graphs.map(function (item, index) {\n        return __jsx(\"div\", {\n          className: \"col-md-6\",\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, __jsx(HighchartsReact, {\n          key: item.id,\n          highcharts: Highcharts,\n          options: item.chartOptions,\n          oneToOne: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }));\n      }) : \"\"));\n    }\n  }]);\n\n  return CustomData;\n}(Component);\n\nexport { CustomData as default };","map":{"version":3,"sources":["/home/laurentiu/Documents/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","chartOptions","chart","zoomType","backgroundColor","subtitle","text","xAxis","type","yAxis","title","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","jwt","data","graphs","cryptocurrencies","id","name","symbol","currencies","selectedCryptocurrency","selectedCurrency","workers","worker","Worker","bkOptions","state","onmessage","e","series","push","cryptocurrency","currency","console","log","setState","postMessage","target","value","Array","loading","i","setTimeout","getCurrentUser","getJwt","selectCC","changeCryptocurrency","map","item","selectC","addGraph","refreshAll","length","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nconst chartOptions = {\n  chart: {zoomType: 'x' , backgroundColor: \"#eeeeee\"},\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\n      xAxis: { type: 'datetime'},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {\n                  hover: {lineWidth: 1}\n              },\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    jwt: \"\",\n    data: [],\n    graphs: [],\n    cryptocurrencies: [\n      {\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      },\n      {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }\n    ],\n    currencies : [\n      {\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      },\n      {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }\n    ],\n    selectedCryptocurrency: \"\",\n    selectedCurrency: \"\",\n    workers: 0,\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({user,jwt});\n   /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n    //console.log(this.state.data);\n  }\n\n  addGraph = () => {\n    \n    const worker = new Worker(\"static/service-worker.js\");\n    const bkOptions = {...chartOptions};\n    const graphs = [...this.state.graphs];\n    worker.onmessage = e => {\n      bkOptions.title =  {text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`},\n      bkOptions.series = [{\n        type: \"area\",\n        name: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n        data: e.data\n      }]\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency,\n          chartOptions: bkOptions,\n          cryptocurrency: this.state.selectedCryptocurrency,\n          currency: this.state.selectedCurrency\n      })\n      console.log(graphs);\n      this.setState({\n        data: e.data,\n        graphs: graphs,\n        workers: this.state.workers+1\n        })\n    }\n    worker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n      /* const graphs = [...this.state.graphs];\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency\n      })\n      this.setState({graphs}); */\n  }\n\n  changeCryptocurrency = (e) => {\n    console.log(e.target.value)\n    this.setState({[`selected${e.target.name}`]:e.target.value});\n  }\n\n  refreshAll = () => {\n    let workers = new Array(this.state.workers);\n    const graphs = [...this.state.graphs];\n    this.setState({loading: true})\n    for(let i=0; i<this.state.workers; i++){\n      workers[i] = new Worker(\"static/service-worker.js\");\n      \n      workers[i].onmessage = e => {\n        console.log(e.data);\n        graphs[i].chartOptions.series = [{\n          type: \"area\",\n          name: this.state.graphs[i].chartOptions.series[0].name,\n          data: e.data\n        }]\n        this.setState({\n          data: e.data,\n          graphs: graphs,\n          loading: false\n        })\n      }\n      setTimeout(() => workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`), 5000)\n      }\n  }\n\n  render() {\n    const selectCC = <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    const selectC = <select name=\"Currency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          {selectCC}\n          {selectC}\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH</button>\n          <div className=\"row\">\n            {this.state.graphs.length > 0 ? \n                this.state.graphs.map((item,index) => \n                    <div className=\"col-md-6\" key={item.id}>\n                        {/* {selectCC}\n                        {selectC} */}\n                        <HighchartsReact key={item.id} highcharts={Highcharts} options={item.chartOptions} oneToOne={true}/>\n                    </div> \n            ): \"\"}\n          </div>\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}