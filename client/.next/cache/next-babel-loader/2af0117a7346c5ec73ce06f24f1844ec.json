{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/laurentiu/Documents/crypto/client/pages/customdata.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\nconst chartOptions = {\n  chart: {\n    zoomType: 'x',\n    backgroundColor: \"#eeeeee\"\n  },\n  subtitle: {\n    text: 'Click and drag in the plot area to zoom in'\n  },\n  xAxis: {\n    type: 'datetime'\n  },\n  yAxis: {\n    title: {\n      text: 'Exchange rate'\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, \"#7cb5ec\"], [0.5, \"#7cb5ec80\"], [0.9, \"#7cb5ff33\"]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  }\n};\nexport default class CustomData extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: {},\n      jwt: \"\",\n      data: [],\n      graphs: [],\n      cryptocurrencies: [{\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      }, {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }],\n      currencies: [{\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      }, {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }],\n      selectedCryptocurrency: \"\",\n      selectedCurrency: \"\",\n      workers: 0,\n      loading: false,\n      chartOptions: {}\n    });\n\n    _defineProperty(this, \"addGraph\", () => {\n      const worker = new Worker(\"static/service-worker.js\");\n\n      const bkOptions = _objectSpread({}, chartOptions);\n\n      const graphs = [...this.state.graphs];\n\n      worker.onmessage = e => {\n        bkOptions.title = {\n          text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`\n        }, bkOptions.series = [{\n          type: \"area\",\n          name: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n          data: e.data\n        }];\n        graphs.push({\n          id: _Date$now(),\n          chartOptions: bkOptions,\n          cryptocurrency: this.state.selectedCryptocurrency,\n          currency: this.state.selectedCurrency\n        });\n        console.log(graphs);\n        this.setState({\n          data: e.data,\n          graphs: graphs,\n          workers: this.state.workers + 1\n        });\n      };\n\n      worker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n    });\n\n    _defineProperty(this, \"changeCryptocurrency\", e => {\n      console.log(e.target.value);\n      this.setState({\n        [`selected${e.target.name}`]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"refreshAll\", () => {\n      let workers = new Array(this.state.workers);\n      const graphs = [...this.state.graphs];\n      this.setState({\n        loading: true\n      });\n\n      for (let i = 0; i < this.state.workers; i++) {\n        workers[i] = new Worker(\"static/service-worker.js\");\n\n        workers[i].onmessage = e => {\n          graphs[i].chartOptions.series = [{\n            type: \"area\",\n            name: this.state.graphs[i].chartOptions.series[0].name,\n            data: e.data\n          }];\n          this.setState({\n            data: e.data,\n            graphs: graphs,\n            loading: false\n          });\n        };\n\n        workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n      }\n    });\n  }\n\n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({\n      user,\n      jwt\n    });\n    /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n       const bkOptions = {...this.state.chartOptions};\n       bkOptions.series = [{\n         type: \"area\",\n         name: \"BTC to EUR\",\n         data: res.data\n       }]\n       this.setState({\n         data: res.data,\n         chartOptions: bkOptions\n         })\n     }); */\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Hello \", this.state.user.name), __jsx(\"div\", {\n      className: \"form-group w-25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, __jsx(\"select\", {\n      name: \"Cryptocurrency\",\n      onChange: this.changeCryptocurrency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Select Cryptocurrency\"), this.state.cryptocurrencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol))), __jsx(\"select\", {\n      name: \"Currency\",\n      onChange: this.changeCryptocurrency,\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, __jsx(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Select Currency\"), this.state.currencies.map(item => __jsx(\"option\", {\n      value: item.id,\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, item.name, \" - \", item.symbol)))), __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.addGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"+\"), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.refreshAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"REFRESH\"), __jsx(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.graphs.length > 0 ? this.state.graphs.map((item, index) => __jsx(\"div\", {\n      className: \"col-md-6\",\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, !this.state.loading && __jsx(HighchartsReact, {\n      key: item.id,\n      highcharts: Highcharts,\n      options: item.chartOptions,\n      oneToOne: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))) : \"\"));\n  }\n\n}","map":{"version":3,"sources":["/home/laurentiu/Documents/crypto/client/pages/customdata.js"],"names":["React","Component","Layout","Highcharts","HighchartsReact","auth","crypto","chartOptions","chart","zoomType","backgroundColor","subtitle","text","xAxis","type","yAxis","title","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","CustomData","user","jwt","data","graphs","cryptocurrencies","id","name","symbol","currencies","selectedCryptocurrency","selectedCurrency","workers","loading","worker","Worker","bkOptions","state","onmessage","e","series","push","cryptocurrency","currency","console","log","setState","postMessage","target","value","Array","i","componentDidMount","getCurrentUser","getJwt","render","changeCryptocurrency","map","item","addGraph","refreshAll","length","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nconst chartOptions = {\n  chart: {zoomType: 'x' , backgroundColor: \"#eeeeee\"},\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\n      xAxis: { type: 'datetime'},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {\n                  hover: {lineWidth: 1}\n              },\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    jwt: \"\",\n    data: [],\n    graphs: [],\n    cryptocurrencies: [\n      {\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      },\n      {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }\n    ],\n    currencies : [\n      {\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      },\n      {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }\n    ],\n    selectedCryptocurrency: \"\",\n    selectedCurrency: \"\",\n    workers: 0,\n    loading: false,\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({user,jwt});\n   /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n  }\n\n  addGraph = () => {\n    \n    const worker = new Worker(\"static/service-worker.js\");\n    const bkOptions = {...chartOptions};\n    const graphs = [...this.state.graphs];\n    worker.onmessage = e => {\n      bkOptions.title =  {text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`},\n      bkOptions.series = [{\n        type: \"area\",\n        name: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n        data: e.data\n      }]\n      graphs.push({\n          id: Date.now(),\n          chartOptions: bkOptions,\n          cryptocurrency: this.state.selectedCryptocurrency,\n          currency: this.state.selectedCurrency\n      })\n      console.log(graphs);\n      this.setState({\n        data: e.data,\n        graphs: graphs,\n        workers: this.state.workers+1\n        })\n    }\n    worker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n  }\n\n  changeCryptocurrency = (e) => {\n    console.log(e.target.value)\n    this.setState({[`selected${e.target.name}`]:e.target.value});\n  }\n\n  refreshAll = () => {\n    let workers = new Array(this.state.workers);\n    const graphs = [...this.state.graphs];\n    this.setState({loading: true})\n    for(let i=0; i<this.state.workers; i++){\n      workers[i] = new Worker(\"static/service-worker.js\");\n      workers[i].onmessage = e => {\n        graphs[i].chartOptions.series = [{\n          type: \"area\",\n          name: this.state.graphs[i].chartOptions.series[0].name,\n          data: e.data\n        }]\n        this.setState({\n          data: e.data,\n          graphs: graphs,\n          loading: false\n        })\n      }\n      workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n      }\n  }\n\n  render() {\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          <div className=\"form-group w-25\">\n            <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency} className=\"form-control\"><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n            <select name=\"Currency\" onChange={this.changeCryptocurrency} className=\"form-control\"><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n          </div>\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH</button>\n          <div className=\"row\">\n            {this.state.graphs.length > 0 ? \n                this.state.graphs.map((item,index) => \n                    <div className=\"col-md-6\" key={item.id}>\n                        \n                        {!this.state.loading && <HighchartsReact key={item.id} highcharts={Highcharts} options={item.chartOptions} oneToOne={true}/>}\n                    </div> \n            ): \"\"}\n          </div>\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}