{"version":3,"file":"static/webpack/static\\development\\pages\\customdata.js.cc236b524c21e4f073f9.hot-update.js","sources":["webpack:///./pages/customdata.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nimport loading from \"../src/91.gif\";\r\nimport cryptoImg from \"../src/crypto-text.png\";\r\n\r\n\r\nconst chartOptions = {\r\n\tchart: { zoomType: 'x' },\r\n\txAxis: {\r\n\t\ttype: 'datetime',\r\n\t\tdateTimeLabelFormats: { day: '%d-%m-%Y - %h:%m' },\r\n\t\ttitle: { text: 'Date' }\r\n\t},\r\n\tyAxis: {\r\n\t\ttitle: { text: 'Exchange rate' }\r\n\t},\r\n\tlegend: { enabled: false },\r\n\tplotOptions: {\r\n\t\tarea: {\r\n\t\t\tfillColor: {\r\n\t\t\t\tlinearGradient: {\r\n\t\t\t\t\tx1: 0,\r\n\t\t\t\t\ty1: 0,\r\n\t\t\t\t\tx2: 0,\r\n\t\t\t\t\ty2: 1\r\n\t\t\t\t},\r\n\t\t\t\tstops: [\r\n\t\t\t\t\t[0, \"#7cb5ec\"],\r\n\t\t\t\t\t[0.5, \"#7cb5ec80\"],\r\n\t\t\t\t\t[0.9, \"#7cb5ff33\"]\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tmarker: { radius: 2 },\r\n\t\t\tlineWidth: 1,\r\n\t\t\tstates: { hover: { lineWidth: 1 } },\r\n\t\t\tthreshold: null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default class CustomData extends Component {\r\n\tstate = {\r\n\t\tuser: {},\r\n\t\tjwt: \"\",\r\n\t\tdata: [],\r\n\t\tgraphs: [],\r\n\t\tcryptocurrencies: [],\r\n\t\tcurrencies: [],\r\n\t\tselectedCryptocurrency: {},\r\n\t\tselectedCurrency: {},\r\n\t\tworkers: 0,\r\n\t\tloading: false,\r\n\t\tloaded: false,\r\n\t\tsearchQueryCryptocurrencies: \"\",\r\n\t\tsearchQueryCurrencies: \"\",\r\n\t\tinterval: [],\r\n\t\tloadArr: [],\r\n\t\tchartOptions: {}\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst user = auth.getCurrentUser();\r\n\t\tconst jwt = auth.getJwt();\r\n\t\tthis.setState({ user, jwt });\r\n\t\tawait crypto.getCryptocurrencies().then(res => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcryptocurrencies: res.data.cryptocurrencies,\r\n\t\t\t\tcurrencies: res.data.currencies,\r\n\t\t\t\tloaded: true\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\taddGraph = () => {\r\n\t\tconst worker = new Worker(\"static/service-worker.js\");\r\n\t\tconst bkOptions = { ...chartOptions };\r\n\t\tconst graphs = [...this.state.graphs];\r\n\t\tconst loadArr = [...this.state.loadArr];\r\n\t\tworker.onmessage = e => {\r\n\t\t\tbkOptions.title = { text: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name} exchange rate over time` };\r\n\t\t\tbkOptions.series = [{\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tname: `${this.state.selectedCryptocurrency.name} to ${this.state.selectedCurrency.name}`,\r\n\t\t\t\tdata: e.data.prices\r\n\t\t\t}];\r\n\t\t\tbkOptions.xAxis.categories = [...e.data.time];\r\n\t\t\tgraphs.push({\r\n\t\t\t\tid: Date.now(),\r\n\t\t\t\tchartOptions: bkOptions,\r\n\t\t\t\tcryptocurrency: this.state.selectedCryptocurrency.value,\r\n\t\t\t\tcurrency: this.state.selectedCurrency.value,\r\n\t\t\t\tlive: false,\r\n\t\t\t\timage: e.data.image\r\n\t\t\t});\r\n\t\t\tloadArr.push(false);\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraphs: graphs,\r\n\t\t\t\tworkers: this.state.workers + 1,\r\n\t\t\t\tinterval: \"\",\r\n\t\t\t\tloadArr\r\n\t\t\t})\r\n\t\t}\r\n\t\tworker.postMessage(`${this.state.selectedCryptocurrency.value},${this.state.selectedCurrency.value},${this.state.jwt}`);\r\n\r\n\t}\r\n\r\n\tfindName = (array, value) => {\r\n\t\tfor (let i = 0; i < this.state[array].length; i++) {\r\n\t\t\tif (this.state[array][i].id === value) {\r\n\t\t\t\treturn this.state[array][i].name;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tchangeCryptocurrency = (e, array) => {\r\n\t\tconst name = this.findName(array, e.target.value);\r\n\t\tthis.setState({\r\n\t\t\t[`selected${e.target.name}`]: {\r\n\t\t\t\tvalue: e.target.value,\r\n\t\t\t\tname: name\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tchangeGraphCryptocurrency = (e, index) => {\r\n\t\tconst graphs = [...this.state.graphs];\r\n\t\tgraphs[index][e.target.name.toLowerCase()] = e.target.value;\r\n\t\tthis.setState({ graphs: graphs })\r\n\t}\r\n\r\n\trefreshAll = () => {\r\n\t\tlet workers = new Array(this.state.workers);\r\n\t\tconst graphs = [...this.state.graphs];\r\n\t\tthis.setState({ loading: true });\r\n\t\tfor (let i = 0; i < this.state.workers; i++) {\r\n\t\t\tworkers[i] = new Worker(\"static/service-worker.js\");\r\n\t\t\tworkers[i].onmessage = e => {\r\n\t\t\t\tgraphs[i].chartOptions.xAxis.categories = [...e.data.time];\r\n\t\t\t\tgraphs[i].chartOptions.series = [{\r\n\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\tname: this.state.graphs[i].chartOptions.series[0].name,\r\n\t\t\t\t\tdata: e.data.prices\r\n\t\t\t\t}]\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tgraphs: graphs,\r\n\t\t\t\t\tloading: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tworkers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\r\n\t\t}\r\n\t}\r\n\r\n\trefreshSingle = (index) => {\r\n\t\tconst worker = new Worker(\"static/service-worker.js\");\r\n\t\tconst graphs = [...this.state.graphs];\r\n\t\tconst loadArr = [...this.state.loadArr];\r\n\t\tloadArr[index] = true;\r\n\t\tthis.setState({loadArr});\r\n\t\tworker.onmessage = e => {\r\n\t\t\tconst cryptocurrency= this.findName(\"cryptocurrencies\", graphs[index].cryptocurrency);\r\n\t\t\tconst currency= this.findName(\"currencies\", graphs[index].currency);\r\n\t\t\tgraphs[index].chartOptions.title = { text: `${cryptocurrency} to ${currency} exchange rate over time` };\r\n\t\t\tgraphs[index].chartOptions.xAxis.categories = [...e.data.time];\r\n\t\t\tgraphs[index].image = e.data.image;\r\n\t\t\tgraphs[index].chartOptions.series = [{\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tname: `${graphs[index].cryptocurrency} to ${graphs[index].currency}`,\r\n\t\t\t\tdata: e.data.prices\r\n\t\t\t}];\r\n\t\t\tloadArr[index] = false;\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraphs: graphs,\r\n\t\t\t\tloadArr\r\n\t\t\t})\r\n\t\t}\r\n\t\tworker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\r\n\t}\r\n\r\n\tremoveGraph = (index) => {\r\n\t\tlet graphs = [...this.state.graphs];\r\n\t\tclearInterval(graphs[index].interval);\r\n\t\tgraphs = graphs.filter((item, i) => i !== index);\r\n\t\tthis.setState({ graphs });\r\n\t}\r\n\r\n\tliveData = (index) => {\r\n\t\tconst worker = new Worker(\"static/service-worker.js\");\r\n\t\tconst graphs = [...this.state.graphs];\r\n\t\tconst loadArr = [...this.state.loadArr];\r\n\t\tloadArr[index] = true;\r\n\t\tthis.setState({loadArr});\r\n\t\tworker.onmessage = e => {\r\n\t\t\tgraphs[index].chartOptions.xAxis.categories.push(e.data.currentTime);\r\n\t\t\tgraphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\r\n\t\t\tgraphs[index].chartOptions.series = [{\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tname: this.state.graphs[index].chartOptions.series[0].name,\r\n\t\t\t\tdata: graphs[index].chartOptions.series[0].data\r\n\t\t\t}];\r\n\t\t\tloadArr[index] = false;\r\n\t\t\tthis.setState({\r\n\t\t\t\tgraphs,\r\n\t\t\t\tloadArr\r\n\t\t\t})\r\n\t\t}\r\n\t\tworker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\r\n\t}\r\n\r\n\tchangeGraphLive = (e, index) => {\r\n\t\tconst graphs = [...this.state.graphs];\r\n\t\tif (e.target.checked) {\r\n\t\t\tgraphs[index].interval = setInterval(() => this.liveData(index), 4000);\r\n\t\t\tthis.setState({ graphs });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tclearInterval(graphs[index].interval);\r\n\t\t}\r\n\t}\r\n\r\n\tsaveGraph = async (index) => {\r\n\t\tconst bkGraph = { ...this.state.graphs[index] };\r\n\t\tconst cryptocurrency= this.findName(\"cryptocurrencies\", bkGraph.cryptocurrency);\r\n\t\tconst currency= this.findName(\"currencies\", bkGraph.currency);\r\n\t\tconst graph = {\r\n\t\t\tcategories: bkGraph.chartOptions.xAxis.categories,\r\n\t\t\tseries: bkGraph.chartOptions.series[0],\r\n\t\t\tgraphId: bkGraph.id,\r\n\t\t\tcryptocurrency: {\r\n\t\t\t\tvalue: bkGraph.cryptocurrency,\r\n\t\t\t\tname: cryptocurrency\r\n\t\t\t},\r\n\t\t\tcurrency: {\r\n\t\t\t\tvalue: bkGraph.currency,\r\n\t\t\t\tname: currency\r\n\t\t\t},\r\n\t\t\tdate: new Date,\r\n\t\t\timage: bkGraph.image\r\n\t\t}\r\n\t\tawait crypto.saveGraph(graph, this.state.user._id).catch(err => console.log(\"ERROR!\", err));\r\n\t}\r\n\r\n\tgetFilteredCryptocurrencies = () => {\r\n\t\tconst { cryptocurrencies: allData, searchQueryCryptocurrencies } = this.state;\r\n\t\tlet filtered = allData;\r\n\t\tif (searchQueryCryptocurrencies) filtered = allData.filter(m => m.name.toLowerCase().startsWith(searchQueryCryptocurrencies.toLowerCase()));\r\n\t\treturn { filtered };\r\n\t};\r\n\r\n\tgetFilteredCurrencies = () => {\r\n\t\tconst { currencies: allData, searchQueryCurrencies } = this.state;\r\n\t\tlet filtered = allData;\r\n\t\tif (searchQueryCurrencies) filtered = allData.filter(m => m.name.toLowerCase().startsWith(searchQueryCurrencies.toLowerCase()));\r\n\t\treturn { filtered };\r\n\t};\r\n\r\n\thandleSearch = (e) => {\r\n\t\tthis.setState({\r\n\t\t\t[e.target.name]: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { filtered: cryptocurrencies } = this.getFilteredCryptocurrencies();\r\n\t\tconst { filtered: currencies } = this.getFilteredCurrencies();\r\n\t\treturn (\r\n\t\t\t<Layout>\r\n\t\t\t\t<div className=\"w-50 mx-auto text-center pt-5\">\r\n\t\t\t\t\t<img src={cryptoImg} />\r\n\t\t\t\t\t<h1 style={{fontFamily: \"Courier New\"}}><strong>Custom Data Graphs</strong></h1>\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{this.state.loaded ?\r\n\t\t\t\t\t<div className=\"text-center pt-2\">\r\n\t\t\t\t\t\t<div className=\"row w-75 mx-auto\">\r\n\t\t\t\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" onChange={this.handleSearch} placeholder=\"Search Cryptocurrency...\" value={this.state.searchQueryCryptocurrencies} name=\"searchQueryCryptocurrencies\" className=\"form-control w-75 shadow\" style={{display: \"inline-block\"}}/>\r\n\t\t\t\t\t\t\t\t<span>   <i className=\"fas fa-search\" style={{display: \"inline-block\"}}/></span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t\t\t\t\t<select name=\"Cryptocurrency\" onChange={(e) => this.changeCryptocurrency(e, \"cryptocurrencies\")} disabled={!this.state.loaded} className=\"form-control\" style={{display: \"inline-block\", width: \"90%\"}}><option value=\"\">Select Cryptocurrency</option>{cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n\t\t\t\t\t\t\t\t<span>   <i className=\"fas fa-hand-pointer\" style={{display: \"inline-block\"}}/></span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-md-6 mt-2\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" onChange={this.handleSearch} placeholder=\"Search Currency...\" value={this.state.searchQueryCurrencies} name=\"searchQueryCurrencies\" className=\"form-control w-75\" style={{display: \"inline-block\"}}/>\r\n\t\t\t\t\t\t\t\t<span>   <i className=\"fas fa-search\" style={{display: \"inline-block\"}}/></span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-md-6 mt-2\">\r\n\t\t\t\t\t\t\t\t<select name=\"Currency\" onChange={(e) => this.changeCryptocurrency(e, \"currencies\")} disabled={!this.state.loaded} className=\"form-control\" style={{display: \"inline-block\", width: \"90%\"}}><option value=\"\">Select Currency</option>{currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n\t\t\t\t\t\t\t\t<span>   <i className=\"fas fa-hand-pointer\" style={{display: \"inline-block\"}}/></span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-md-6 mt-3\">\r\n\t\t\t\t\t\t\t\t<p><strong>Add graph for selected values</strong></p>\r\n\t\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.addGraph} disabled={Object.keys(this.state.selectedCryptocurrency).length === 0 || Object.keys(this.state.selectedCurrency).length === 0}><i className=\"fas fa-plus\"/></button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-md-6 mt-3\">\r\n\t\t\t\t\t\t\t\t<p><strong>Refresh all graphs</strong></p>\r\n\t\t\t\t\t\t\t\t<button className=\"btn btn-success\" onClick={this.refreshAll} disabled={this.state.graphs.length === 0}><i className=\"fas fa-sync\"/></button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{this.state.graphs.length > 0 ?\r\n\t\t\t\t\t\t\tthis.state.graphs.map((item, index) => \r\n\t\t\t\t\t\t\t\t<div key={item.id} className=\"pt-3\">\r\n\t\t\t\t\t\t\t\t\t<hr/>\r\n\t\t\t\t\t\t\t\t\t<img src={item.image} />\r\n\t\t\t\t\t\t\t\t\t<div className=\"row mt-4\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-9 text-center\">\r\n\t\t\t\t\t\t\t\t\t\t\t{!this.state.loading && !this.state.loadArr[index] ? <HighchartsReact key={item.id} highcharts={Highcharts} options={item.chartOptions} allowChartUpdate = {true} /> : <div className=\"mx-auto text-center\" style={{paddingTop: \"20%\"}}><img src={loading} /></div>}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<select name=\"Cryptocurrency\" onChange={(e) => this.changeGraphCryptocurrency(e, index)} defaultValue={item.cryptocurrency} className=\"form-control shadow\">{this.state.cryptocurrencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<select name=\"Currency\" onChange={(e) => this.changeGraphCryptocurrency(e, index)} defaultValue={item.currency} className=\"form-control shadow\">{this.state.currencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-12 mt-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p><strong>Live data</strong></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={(e) => this.changeGraphLive(e, index)} defaultValue={item.live} className=\"form-control\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-6 mt-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p><strong>Search</strong></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-warning\" onClick={() => this.refreshSingle(index)}><i className=\"fas fa-search\"/></button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-6 mt-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p><strong>Refresh</strong></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-success\" onClick={() => this.refreshSingle(index)}><i className=\"fas fa-redo\"/></button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-6 mt-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p><strong>Delete</strong></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-danger\" onClick={() => this.removeGraph(index)}><i className=\"fas fa-minus\"/></button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-md-6 mt-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p><strong>Save</strong></p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={() => this.saveGraph(index)}><i className=\"fas fa-save\"/></button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t) : \"\"}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t: <div className=\"w-50 mx-auto text-center\" style={{paddingTop: \"30vh\"}}><img src={loading} /></div>}\r\n\t\t\t</Layout>\r\n\t\t)\r\n\t}\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAaA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAjBA;AADA;AAXA;AACA;AAiCA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AA+BA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAlBA;AACA;AAGA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAbA;AAJA;AAAA;AAmBA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAqBA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;AAvMA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;;;;;;;;;;;;;AA8LA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCA;AA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AApTA;AACA;;;;;A","sourceRoot":""}