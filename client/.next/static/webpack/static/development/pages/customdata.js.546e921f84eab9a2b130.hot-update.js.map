{"version":3,"file":"static/webpack/static/development/pages/customdata.js.546e921f84eab9a2b130.hot-update.js","sources":["webpack:///./pages/customdata.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Layout from \"../components/layout\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport auth from \"../services/authService\";\nimport crypto from \"../services/cryptoService\";\n\nconst chartOptions = {\n  chart: {zoomType: 'x' , backgroundColor: \"#eeeeee\"},\n      subtitle: {text: 'Click and drag in the plot area to zoom in'},\n      xAxis: { type: 'datetime'},\n      yAxis: {\n          title: {text: 'Exchange rate'}\n      },\n      legend: {enabled: false},\n      plotOptions: {\n          area: {\n              fillColor: {\n                  linearGradient: {\n                      x1: 0,\n                      y1: 0,\n                      x2: 0,\n                      y2: 1\n                  },\n                  stops: [\n                    [0, \"#7cb5ec\"],\n                    [0.5, \"#7cb5ec80\"],\n                    [0.9, \"#7cb5ff33\"]\n                ]\n              },\n              marker: {radius: 2},\n              lineWidth: 1,\n              states: {\n                  hover: {lineWidth: 1}\n              },\n              threshold: null\n          }\n      }\n    }\n\nexport default class CustomData extends Component {\n  state = {\n    user: {},\n    jwt: \"\",\n    data: [],\n    graphs: [],\n    cryptocurrencies: [\n      {\n        id: \"bitcoin\",\n        name: \"Bitcoin\",\n        symbol: \"BTC\"\n      },\n      {\n        id: \"ethereum\",\n        name: \"Ethereum\",\n        symbol: \"ETH\"\n      }\n    ],\n    currencies : [\n      {\n        id: \"eur\",\n        name: \"Euro\",\n        symbol: \"EUR\"\n      },\n      {\n        id: \"usd\",\n        name: \"American Dollar\",\n        symbol: \"USD\"\n      }\n    ],\n    selectedCryptocurrency: \"\",\n    selectedCurrency: \"\",\n    workers: 0,\n    loading: false,\n    chartOptions: {}\n  }\n  \n  async componentDidMount() {\n    const user = auth.getCurrentUser();\n    const jwt = auth.getJwt();\n    this.setState({user,jwt});\n   /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\n      const bkOptions = {...this.state.chartOptions};\n      bkOptions.series = [{\n        type: \"area\",\n        name: \"BTC to EUR\",\n        data: res.data\n      }]\n      this.setState({\n        data: res.data,\n        chartOptions: bkOptions\n        })\n    }); */\n    //console.log(this.state.data);\n  }\n\n  addGraph = () => {\n    \n    const worker = new Worker(\"static/service-worker.js\");\n    const bkOptions = {...chartOptions};\n    const graphs = [...this.state.graphs];\n    worker.onmessage = e => {\n      bkOptions.title =  {text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`},\n      bkOptions.series = [{\n        type: \"area\",\n        name: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\n        data: e.data\n      }]\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency,\n          chartOptions: bkOptions,\n          cryptocurrency: this.state.selectedCryptocurrency,\n          currency: this.state.selectedCurrency\n      })\n      console.log(graphs);\n      this.setState({\n        data: e.data,\n        graphs: graphs,\n        workers: this.state.workers+1\n        })\n    }\n    worker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\n      /* const graphs = [...this.state.graphs];\n      graphs.push({\n          id: this.state.selectedCryptocurrency+this.state.selectedCurrency\n      })\n      this.setState({graphs}); */\n  }\n\n  changeCryptocurrency = (e) => {\n    console.log(e.target.value)\n    this.setState({[`selected${e.target.name}`]:e.target.value});\n  }\n\n  refreshAll = () => {\n    let workers = new Array(this.state.workers);\n    const graphs = [...this.state.graphs];\n    this.setState({loading: true})\n    for(let i=0; i<this.state.workers; i++){\n      workers[i] = new Worker(\"static/service-worker.js\");\n      \n      workers[i].onmessage = e => {\n        console.log(e.data);\n        graphs[i].chartOptions.series = [{\n          type: \"area\",\n          name: this.state.graphs[i].chartOptions.series[0].name,\n          data: e.data\n        }]\n        this.setState({\n          data: e.data,\n          graphs: graphs,\n          loading: false\n        })\n      }\n      workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\n      }\n  }\n\n  render() {\n    const selectCC = <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    const selectC = <select name=\"Currency\" onChange={this.changeCryptocurrency}><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\n    return (\n      <Layout>\n          <p>Hello {this.state.user.name}</p>\n          {selectCC}\n          {selectC}\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH</button>\n          <div className=\"row\">\n            {this.state.graphs.length > 0 ? \n                this.state.graphs.map((item,index) => \n                    <div className=\"col-md-6\" key={item.id}>\n                        <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency}>{this.state.cryptocurrencies.map(i => (<option value={i.id} key={i.id} defaultValue={i.id === item.cryptocurrency}>{i.name} - {i.symbol}</option>))}</select>\n                        <select name=\"Currency\" onChange={this.changeCryptocurrency}>{this.state.currencies.map(i => (<option value={i.id} key={i.id} defaultValue={i.id === item.currency}>{i.name} - {i.symbol}</option>))}</select>\n                        {!this.state.loading && <HighchartsReact key={item.id} highcharts={Highcharts} options={item.chartOptions} oneToOne={true}/>}\n                    </div> \n            ): \"\"}\n          </div>\n      </Layout>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAnBA;AADA;AARA;AACA;AAgCA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAjCA;AACA;AAsDA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AApBA;AACA;AAGA;AAAA;AAiBA;AACA;AACA;;;;;;;;;;;;;;;AA/EA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AAYA;AACA;;;;;;;;;;;;;;;;;AAgsourceRoot":""}