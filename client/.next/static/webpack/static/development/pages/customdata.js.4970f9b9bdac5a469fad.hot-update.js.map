{"version":3,"file":"static/webpack/static\\development\\pages\\customdata.js.4970f9b9bdac5a469fad.hot-update.js","sources":["webpack:///./pages/customdata.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\n// import HighchartsReact from 'highcharts-react-official';\r\nimport ReactHighcharts from 'react-highcharts';\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nimport loading from \"../src/91.gif\";\r\n\r\n\r\nconst chartOptions = {\r\n  chart: {zoomType: 'x'},\r\n      xAxis: { type: 'datetime'},\r\n      yAxis: {\r\n          title: {text: 'Exchange rate'}\r\n      },\r\n      legend: {enabled: false},\r\n      plotOptions: {\r\n          area: {\r\n              fillColor: {\r\n                  linearGradient: {\r\n                      x1: 0,\r\n                      y1: 0,\r\n                      x2: 0,\r\n                      y2: 1\r\n                  },\r\n                  stops: [\r\n                    [0, \"#7cb5ec\"],\r\n                    [0.5, \"#7cb5ec80\"],\r\n                    [0.9, \"#7cb5ff33\"]\r\n                ]\r\n              },\r\n              marker: {radius: 2},\r\n              lineWidth: 1,\r\n              states: {\r\n                  hover: {lineWidth: 1}\r\n              },\r\n              threshold: null\r\n          }\r\n      }\r\n    }\r\n\r\nexport default class CustomData extends Component {\r\n  state = {\r\n    user: {},\r\n    jwt: \"\",\r\n    data: [],\r\n    graphs: [],\r\n    cryptocurrencies: [\r\n      {\r\n        id: \"bitcoin\",\r\n        name: \"Bitcoin\",\r\n        symbol: \"BTC\"\r\n      },\r\n      {\r\n        id: \"ethereum\",\r\n        name: \"Ethereum\",\r\n        symbol: \"ETH\"\r\n      }\r\n    ],\r\n    currencies : [\r\n      {\r\n        id: \"eur\",\r\n        name: \"Euro\",\r\n        symbol: \"EUR\"\r\n      },\r\n      {\r\n        id: \"usd\",\r\n        name: \"American Dollar\",\r\n        symbol: \"USD\"\r\n      }\r\n    ],\r\n    selectedCryptocurrency: \"\",\r\n    selectedCurrency: \"\",\r\n    workers: 0,\r\n\tloading: false,\r\n\ttimes: 0,\r\n    chartOptions: {}\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    const user = auth.getCurrentUser();\r\n    const jwt = auth.getJwt();\r\n    this.setState({user,jwt});\r\n   /* await crypto.getCurrencies(\"bitcoin\",\"eur\").then(res => {\r\n      const bkOptions = {...this.state.chartOptions};\r\n      bkOptions.series = [{\r\n        type: \"area\",\r\n        name: \"BTC to EUR\",\r\n        data: res.data\r\n      }]\r\n      this.setState({\r\n        data: res.data,\r\n        chartOptions: bkOptions\r\n        })\r\n    }); */\r\n  }\r\n\r\n  addGraph = () => {\r\n    const worker = new Worker(\"static/service-worker.js\");\r\n    const bkOptions = {...chartOptions};\r\n    const graphs = [...this.state.graphs];\r\n    worker.onmessage = e => {\r\n\t\tconsole.log(e.data);\r\n\t\tbkOptions.title =  {text: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency} exchange rate over time`},\r\n\t\tbkOptions.series = [{\r\n\t\t\ttype: \"line\",\r\n\t\t\tname: `${this.state.selectedCryptocurrency} to ${this.state.selectedCurrency}`,\r\n\t\t\tdata: e.data.prices\r\n\t\t}]\r\n\t\tgraphs.push({\r\n\t\t\tid: Date.now(),\r\n\t\t\tchartOptions: bkOptions,\r\n\t\t\tcryptocurrency: this.state.selectedCryptocurrency,\r\n\t\t\tcurrency: this.state.selectedCurrency,\r\n\t\t\tlive: false\r\n\t\t})\r\n      \tconsole.log(graphs);\r\n      \tthis.setState({\r\n        \tdata: e.data.prices,\r\n        \tgraphs: graphs,\r\n\t\t\tworkers: this.state.workers+1,\r\n\t\t})\r\n    }\r\n    worker.postMessage(`${this.state.selectedCryptocurrency},${this.state.selectedCurrency},${this.state.jwt}`);\r\n    \r\n  }\r\n\r\n  changeCryptocurrency = (e) => {\r\n    console.log(e.target.value)\r\n    this.setState({[`selected${e.target.name}`]:e.target.value});\r\n  }\r\n\r\n  refreshAll = () => {\r\n    let workers = new Array(this.state.workers);\r\n    const graphs = [...this.state.graphs];\r\n    this.setState({loading: true})\r\n    for(let i=0; i<this.state.workers; i++){\r\n      workers[i] = new Worker(\"static/service-worker.js\");\r\n      workers[i].onmessage = e => {\r\n        graphs[i].chartOptions.series = [{\r\n          type: \"area\",\r\n          name: this.state.graphs[i].chartOptions.series[0].name,\r\n          data: e.data.prices\r\n        }]\r\n        this.setState({\r\n          data: e.data.prices,\r\n          graphs: graphs,\r\n          loading: false\r\n        })\r\n      }\r\n      workers[i].postMessage(`${graphs[i].cryptocurrency},${graphs[i].currency},${this.state.jwt}`);\r\n      }\r\n  }\r\n\r\n  liveData = (index) => {\r\n    console.log(\"LIVE\",index);\r\n    const worker = new Worker(\"static/service-worker.js\");\r\n    const graphs = [...this.state.graphs];\r\n\tworker.onmessage = e => {\r\n        graphs[index].chartOptions.series[0].data.push(e.data.currentPrice);\r\n        graphs[index].chartOptions.series = [{\r\n          type: \"area\",\r\n          name: this.state.graphs[index].chartOptions.series[0].name,\r\n          data: graphs[index].chartOptions.series[0].data\r\n\t\t}]\r\n        this.setState({\r\n          \tdata: graphs[index].chartOptions.series[0].data,\r\n          \tgraphs: graphs\r\n        })\r\n      }\r\n\tworker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\r\n  }\r\n\r\n  changeGraphLive = (e,index) => {\r\n\tsetInterval(() => this.liveData(index), 4000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n          <p>Hello {this.state.user.name}</p>\r\n          <div className=\"form-group w-25\">\r\n            <select name=\"Cryptocurrency\" onChange={this.changeCryptocurrency} className=\"form-control\"><option value=\"\">Select Cryptocurrency</option>{this.state.cryptocurrencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n            <select name=\"Currency\" onChange={this.changeCryptocurrency} className=\"form-control\"><option value=\"\">Select Currency</option>{this.state.currencies.map(item => (<option value={item.id} key={item.id}>{item.name} - {item.symbol}</option>))}</select>\r\n          </div>\r\n          <button className=\"btn btn-primary\" onClick={this.addGraph}>+</button>\r\n          <button className=\"btn btn-success\" onClick={this.refreshAll}>REFRESH</button>\r\n          <div className=\"row\">\r\n            {this.state.graphs.length > 0 ? \r\n\t\t\t\tthis.state.graphs.map((item,index) => \r\n\t\t\t\t\t<div className=\"row\" key={item.id}>\r\n\t\t\t\t\t\t<div className=\"col-md-2\">\r\n\t\t\t\t\t\t\t<select name=\"Cryptocurrency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.cryptocurrency} className=\"form-control\">{this.state.cryptocurrencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\r\n                        \t<select name=\"Currency\" onChange={this.changeGraphCryptocurrency} defaultValue={item.currency} className=\"form-control\">{this.state.currencies.map(i => (<option value={i.id} key={i.id}>{i.name} - {i.symbol}</option>))}</select>\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={(e) => this.changeGraphLive(e,index)} defaultValue={item.live} className=\"form-control\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"col-md-10 text-center\">\r\n\t\t\t\t\t\t\t{!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true}/> : <img src={loading}/>}\r\n\t\t\t\t\t\t</div> \r\n\t\t\t\t\t</div>\r\n            ): \"\"}\r\n          </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAnBA;AADA;AAPA;AACA;AA+BA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAlCA;AACA;AAsDA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAlBA;AACA;AAGA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAhGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAeA;;;;AAnKA;AACA;;;;;A","sourceRoot":""}