{"version":3,"file":"static/webpack/static\\development\\pages\\saveddata.js.5aa3d9c6833a96454f13.hot-update.js","sources":["webpack:///./pages/saveddata.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from \"../components/layout\";\r\nimport Highcharts from 'highcharts';\r\nimport ReactHighcharts from 'react-highcharts';\r\nimport update from \"immutability-helper\";\r\n\r\nimport auth from \"../services/authService\";\r\nimport crypto from \"../services/cryptoService\";\r\n\r\nimport loading from \"../src/91.gif\";\r\nimport cryptoImg from \"../src/crypto-text.png\";\r\n\r\nconst chartOptions = {\r\n\tchart: { zoomType: 'x' },\r\n\txAxis: {\r\n\t\ttype: 'datetime',\r\n\t\tdateTimeLabelFormats: { day: '%d-%m-%Y - %h:%m' },\r\n\t\ttitle: { text: 'Date' }\r\n\t},\r\n\tyAxis: {\r\n\t\ttitle: { text: 'Exchange rate' }\r\n\t},\r\n\tlegend: { enabled: false },\r\n\tplotOptions: {\r\n\t\tarea: {\r\n\t\t\tfillColor: {\r\n\t\t\t\tlinearGradient: {\r\n\t\t\t\t\tx1: 0,\r\n\t\t\t\t\ty1: 0,\r\n\t\t\t\t\tx2: 0,\r\n\t\t\t\t\ty2: 1\r\n\t\t\t\t},\r\n\t\t\t\tstops: [\r\n\t\t\t\t\t[0, \"#7cb5ec\"],\r\n\t\t\t\t\t[0.5, \"#7cb5ec80\"],\r\n\t\t\t\t\t[0.9, \"#7cb5ff33\"]\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\tmarker: { radius: 2 },\r\n\t\t\tlineWidth: 1,\r\n\t\t\tstates: { hover: { lineWidth: 1 } },\r\n\t\t\tthreshold: null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default class SavedData extends Component {\r\n    state = {\r\n        user: {},\r\n        jwt: \"\",\r\n        data: {\r\n            graphs: []\r\n        },\r\n        loaded: false,\r\n        graphs: []\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const user = await auth.getCurrentUser();\r\n        const jwt = auth.getJwt();\r\n        this.setState({ user, jwt });\r\n        this.refreshData();\r\n    }\r\n\r\n    refreshData = async () => {\r\n        let graphs = [];\r\n        if(this.state.graphs.length === 0) graphs = [];\r\n        else this.setState({graphs:[]});\r\n        const {data} = await crypto.getSavedData(this.state.user._id);\r\n        console.log(data);\r\n        for(let i=0; i<data.graphs.length; i++){\r\n            console.log(data.graphs[i]);\r\n            bkOptions.title = { text: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name} exchange rate over time` };\r\n            bkOptions.series = [{\r\n                type: \"line\",\r\n                name: `${data.graphs[i].cryptocurrency.name} to ${data.graphs[i].currency.name}`,\r\n                data: data.graphs[i].series.data\r\n            }];\r\n\t\t\tbkOptions.xAxis.categories = data.graphs[i].categories;\r\n\t\t\tgraphs.push({\r\n\t\t\t\tchartOptions: bkOptions,\r\n\t\t\t\tcryptocurrency: {\r\n                    name: data.graphs[i].cryptocurrency.name,\r\n                    value: data.graphs[i].cryptocurrency.value\r\n                },\r\n\t\t\t\tcurrency: {\r\n                    name: data.graphs[i].currency.name,\r\n                    value: data.graphs[i].currency.value\r\n                },\r\n\t\t\t\tlive: false,\r\n                image: data.graphs[i].image,\r\n                graphId: data.graphs[i].graphId,\r\n                date: data.graphs[i].date\r\n\t\t\t});\r\n        }\r\n        this.setState({data, loaded: true, graphs})\r\n    }\r\n\r\n    refreshSingle = (index) => {\r\n        const worker = new Worker(\"static/service-worker.js\");\r\n        const graphs = [...this.state.graphs];\r\n        worker.onmessage = e => {\r\n            const cryptocurrency= this.findName(\"cryptocurrencies\", graphs[index].cryptocurrency);\r\n            const currency= this.findName(\"currencies\", graphs[index].currency);\r\n            graphs[index].chartOptions.title = { text: `${cryptocurrency} to ${currency} exchange rate over time` };\r\n            graphs[index].chartOptions.xAxis.categories = [...e.data.time];\r\n            graphs[index].image = e.data.image;\r\n            graphs[index].chartOptions.series = [{\r\n                type: \"line\",\r\n                name: `${graphs[index].cryptocurrency} to ${graphs[index].currency}`,\r\n                data: e.data.prices\r\n            }];\r\n            this.setState({\r\n                graphs: graphs\r\n            })\r\n        }\r\n        worker.postMessage(`${graphs[index].cryptocurrency},${graphs[index].currency},${this.state.jwt}`);\r\n    }\r\n\r\n    compare = (e,index) => {\r\n        if(e.target.checked){\r\n            const worker = new Worker(\"static/service-worker.js\");\r\n            const graphs = [...this.state.graphs];\r\n            console.log(graphs[index]);\r\n            worker.onmessage = e => {\r\n                graphs[index].chartOptions.series = [\r\n                {\r\n                    type: \"line\",\r\n                    name: this.state.graphs[index].chartOptions.series[0].name,\r\n                    data: graphs[index].chartOptions.series[0].data\r\n                },\r\n                {\r\n                    type: \"line\",\r\n                    name: `Current ${this.state.graphs[index].chartOptions.series[0].name}`,\r\n                    data: e.data.prices\r\n                }]\r\n                this.setState({\r\n                    graphs\r\n                })\r\n            }\r\n            worker.postMessage(`${graphs[index].cryptocurrency.value},${graphs[index].currency.value},${this.state.jwt}`);\r\n        }\r\n        else this.refreshSingle(index);\r\n    }\r\n\r\n    removeGraph = async (index) => {\r\n\t\tlet graphs = [...this.state.graphs];\r\n        graphs = graphs.filter((item, i) => i !== index);\r\n        let bkGraphs = [];\r\n        graphs.forEach(element => {\r\n            bkGraphs.push({\r\n                categories: element.chartOptions.xAxis.categories,\r\n                series: element.chartOptions.series[0],\r\n                graphId: element.id,\r\n                cryptocurrency: {\r\n                    value: element.cryptocurrency.value,\r\n                    name: element.cryptocurrency.name\r\n                },\r\n                currency: {\r\n                    value: element.currency.value,\r\n                    name: element.currency.name\r\n                },\r\n                date: new Date,\r\n                image: element.image\r\n            })\r\n        });\r\n        const graph = {\r\n            userId: this.state.user._id,\r\n            graphs: bkGraphs\r\n        }\r\n        await crypto.replaceGraphs(graph);\r\n\t\tthis.setState({ graphs });\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <div className=\"w-50 mx-auto text-center pt-5\">\r\n\t\t\t\t\t<img src={cryptoImg} />\r\n\t\t\t\t\t<h1 style={{fontFamily: \"Courier New\"}}><strong>Saved Data</strong></h1>\r\n\t\t\t\t\t<hr/>\r\n                    {this.state.loaded && <div className=\"col-md-12 mt-3\">\r\n                        <p><strong>Refresh</strong></p>\r\n                        <button className=\"btn btn-success\" onClick={this.refreshData}><i className=\"fas fa-sync\"/></button>\r\n                    </div>}\r\n                </div>\r\n                {this.state.loaded ?\r\n                    <div className=\"text-center\">\r\n                        {this.state.graphs.length > 0 ?\r\n                            this.state.graphs.map((item, index) =>\r\n                                <div key={item.graphId} className=\"pt-3\">\r\n                                    {console.log(item)}\r\n                                    <hr/>\r\n                                    <img src={item.image} />\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"col-md-9 text-center\">\r\n                                            {!this.state.loading ? <ReactHighcharts key={item.id} highcharts={Highcharts} config={item.chartOptions} ref=\"chart\" oneToOne={true} /> : <img src={loading} />}\r\n                                        </div>\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <div className=\"pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" value={item.cryptocurrency.name} className=\"form-control text-center\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-2\">\r\n                                                <input type=\"text\" value={item.currency.name} className=\"form-control text-center\" disabled/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-md-12 mt-3\">\r\n                                                        <p><strong>Compare with current data</strong></p>\r\n                                                        <input type=\"checkbox\" onChange={(e) => this.compare(e, index)} className=\"form-control\" />\r\n                                                    </div>\r\n                                                    <div className=\"col-md-12 mt-3\">\r\n                                                        <p><strong>Delete</strong></p>\r\n                                                        <button className=\"btn btn-danger\" onClick={() => this.removeGraph(index)}><i className=\"fas fa-minus\"/></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            ) : \"\"}\r\n                    </div>\r\n\t\t\t\t: <div className=\"w-50 mx-auto text-center\" style={{paddingTop: \"30vh\"}}><img src={loading} /></div>}\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAaA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAjBA;AADA;AAXA;AACA;AAiCA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAPA;AACA;;;;;AAgBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAHA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAbA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiCA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAIA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAEA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAbA;AAeA;AACA;AACA;AACA;AAFA;AArBA;AAAA;AACA;AADA;AA0BA;AAAA;AAAA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAxFA;AACA;;AADA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;AAgxBA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AApLA;AACA;;;;;A","sourceRoot":""}